/*
 * ComUART.h
 *
 *  Created on: Apr 22, 2021
 *      Author: trocache
 *  CIBLE : stm32L476RG (Nucléo board)
 *  IDE : Cube IDE vers 1.5.1
 *  CONTEXTE : pilotage, régulation de systèmes de puissance. Partie analogique
 *  DEPENDENCES : Le code s'appuie sur les registres du stm32L476 donc
 *  essentiellement sur stm32l476xx.h via stm32l4xx.h (voir Drivers/CMSIS/ST/STM324xx/Include
 *
 *
 *   ======= GENERALITE  ===================
 *
 *  ECRITURE Tx: une fonction print permet d'envoyer une chaîne de caractère. Elle est entièrement
 *  gérée en polling. Pourra être interrompue sans problème.
 *
 *  LECTURE Rx: la lecture est uniquement prévue à l'octet puisque les commandes (8 possibles
 *  duplication de 4 commandes up, Down, Left, Right pour jouer sur la partie gauche ou droite
 *  du clavier, voir #define).
 *
 *  Une interruption est déclenchée sur réception d'un caractère. Si le caractère est reconnu
 *  comme étant une commande, cette dernière est mémorisée.
 *
 *  Deux initialisations sont possibles, l'une ComUART_Init conduit l'utilisateur à scruter
 *  un flag d'arrivée d'une nouvelle commande.
 *  L'autre ComUART_Init_IT permet à l'utilisateur d'indiquer une fonction callback que sera
 *  appelée dès reconnaissance d'une commande dans la fonction d'interruption.
 *
 *  En mode polling (ComUART_Init), le user doit gérer le flag de réception d'une nouvelle
 *  commande, et également l'effacer après lecture. Le user doit tout gérer.
 *  En mode IT (ComUART_Init_IT), le user ne se soucit de rien. L'entrée dans le callback est
 *  automatique dès qu'une commande est reconnue, aucun flag à gérer.
 *
 */

#ifndef COMUART_COMUART_H_
#define COMUART_COMUART_H_

#include "stm32l4xx_hal.h"
#include "stm32l4xx_hal_uart.h"


/******************************************************************************
*  Priorité IT du module
*
******************************************************************************/
#define ComUART_Prio 6




void ComUART_Init_IT(UART_HandleTypeDef * UsedUSART, void (*Callback)(void));
char ComUART_GetCmd(void);



void ComUART_Init(UART_HandleTypeDef * UsedUSART);
char ComUART_IsNewCmde(void);
void ComUART_ClrReceptFlag(void);

void ComUART_Print(char * Str, char Lenth);
char ComUART_IsTansmitting(void);




/******************************************************************************
*  Les commandes (code ASCII touches clavier)
*
******************************************************************************/

// pour les droitiers
#define Uart_Up_R 'o'
#define Uart_Down_R 'l'
#define Uart_Left_R 'k'
#define Uart_Right_R 'm'
// pour les gauchers
#define Uart_Up_L 'z'
#define Uart_Down_L 's'
#define Uart_Left_L 'q'
#define Uart_Right_L 'd'



#endif /* COMUART_COMUART_H_ */
