
analog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800594c  0800594c  0001594c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005994  08005994  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005994  08005994  00015994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800599c  0800599c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800599c  0800599c  0001599c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059a0  080059a0  000159a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080059a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000000c  080059b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  080059b0  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139f1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000228e  00000000  00000000  00033a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e8  00000000  00000000  00035cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011d0  00000000  00000000  00036fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000286db  00000000  00000000  00038178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ec1f  00000000  00000000  00060853  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00104a01  00000000  00000000  0006f472  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00173e73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005288  00000000  00000000  00173ef0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005934 	.word	0x08005934

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005934 	.word	0x08005934

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b972 	b.w	8000d00 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	4688      	mov	r8, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14b      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4615      	mov	r5, r2
 8000a46:	d967      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0720 	rsb	r7, r2, #32
 8000a52:	fa01 f302 	lsl.w	r3, r1, r2
 8000a56:	fa20 f707 	lsr.w	r7, r0, r7
 8000a5a:	4095      	lsls	r5, r2
 8000a5c:	ea47 0803 	orr.w	r8, r7, r3
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a6c:	fa1f fc85 	uxth.w	ip, r5
 8000a70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a78:	fb07 f10c 	mul.w	r1, r7, ip
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18eb      	adds	r3, r5, r3
 8000a82:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a86:	f080 811b 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8118 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000a90:	3f02      	subs	r7, #2
 8000a92:	442b      	add	r3, r5
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aa8:	45a4      	cmp	ip, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	192c      	adds	r4, r5, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8107 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000ab6:	45a4      	cmp	ip, r4
 8000ab8:	f240 8104 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000abc:	3802      	subs	r0, #2
 8000abe:	442c      	add	r4, r5
 8000ac0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ac4:	eba4 040c 	sub.w	r4, r4, ip
 8000ac8:	2700      	movs	r7, #0
 8000aca:	b11e      	cbz	r6, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad4:	4639      	mov	r1, r7
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d909      	bls.n	8000af2 <__udivmoddi4+0xbe>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80eb 	beq.w	8000cba <__udivmoddi4+0x286>
 8000ae4:	2700      	movs	r7, #0
 8000ae6:	e9c6 0100 	strd	r0, r1, [r6]
 8000aea:	4638      	mov	r0, r7
 8000aec:	4639      	mov	r1, r7
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	fab3 f783 	clz	r7, r3
 8000af6:	2f00      	cmp	r7, #0
 8000af8:	d147      	bne.n	8000b8a <__udivmoddi4+0x156>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d302      	bcc.n	8000b04 <__udivmoddi4+0xd0>
 8000afe:	4282      	cmp	r2, r0
 8000b00:	f200 80fa 	bhi.w	8000cf8 <__udivmoddi4+0x2c4>
 8000b04:	1a84      	subs	r4, r0, r2
 8000b06:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	4698      	mov	r8, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d0e0      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b12:	e9c6 4800 	strd	r4, r8, [r6]
 8000b16:	e7dd      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b18:	b902      	cbnz	r2, 8000b1c <__udivmoddi4+0xe8>
 8000b1a:	deff      	udf	#255	; 0xff
 8000b1c:	fab2 f282 	clz	r2, r2
 8000b20:	2a00      	cmp	r2, #0
 8000b22:	f040 808f 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b26:	1b49      	subs	r1, r1, r5
 8000b28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b2c:	fa1f f885 	uxth.w	r8, r5
 8000b30:	2701      	movs	r7, #1
 8000b32:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b36:	0c23      	lsrs	r3, r4, #16
 8000b38:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b40:	fb08 f10c 	mul.w	r1, r8, ip
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b48:	18eb      	adds	r3, r5, r3
 8000b4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4299      	cmp	r1, r3
 8000b52:	f200 80cd 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b56:	4684      	mov	ip, r0
 8000b58:	1a59      	subs	r1, r3, r1
 8000b5a:	b2a3      	uxth	r3, r4
 8000b5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b60:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b68:	fb08 f800 	mul.w	r8, r8, r0
 8000b6c:	45a0      	cmp	r8, r4
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x14c>
 8000b70:	192c      	adds	r4, r5, r4
 8000b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x14a>
 8000b78:	45a0      	cmp	r8, r4
 8000b7a:	f200 80b6 	bhi.w	8000cea <__udivmoddi4+0x2b6>
 8000b7e:	4618      	mov	r0, r3
 8000b80:	eba4 0408 	sub.w	r4, r4, r8
 8000b84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b88:	e79f      	b.n	8000aca <__udivmoddi4+0x96>
 8000b8a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b8e:	40bb      	lsls	r3, r7
 8000b90:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b94:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b98:	fa01 f407 	lsl.w	r4, r1, r7
 8000b9c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ba0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ba4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ba8:	4325      	orrs	r5, r4
 8000baa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bae:	0c2c      	lsrs	r4, r5, #16
 8000bb0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bb4:	fa1f fa8e 	uxth.w	sl, lr
 8000bb8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bbc:	fb09 f40a 	mul.w	r4, r9, sl
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bc6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1e 0303 	adds.w	r3, lr, r3
 8000bd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bd4:	f080 8087 	bcs.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	f240 8084 	bls.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bde:	f1a9 0902 	sub.w	r9, r9, #2
 8000be2:	4473      	add	r3, lr
 8000be4:	1b1b      	subs	r3, r3, r4
 8000be6:	b2ad      	uxth	r5, r5
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bf4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bf8:	45a2      	cmp	sl, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1e 0404 	adds.w	r4, lr, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	d26b      	bcs.n	8000cde <__udivmoddi4+0x2aa>
 8000c06:	45a2      	cmp	sl, r4
 8000c08:	d969      	bls.n	8000cde <__udivmoddi4+0x2aa>
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	4474      	add	r4, lr
 8000c0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c12:	fba0 8902 	umull	r8, r9, r0, r2
 8000c16:	eba4 040a 	sub.w	r4, r4, sl
 8000c1a:	454c      	cmp	r4, r9
 8000c1c:	46c2      	mov	sl, r8
 8000c1e:	464b      	mov	r3, r9
 8000c20:	d354      	bcc.n	8000ccc <__udivmoddi4+0x298>
 8000c22:	d051      	beq.n	8000cc8 <__udivmoddi4+0x294>
 8000c24:	2e00      	cmp	r6, #0
 8000c26:	d069      	beq.n	8000cfc <__udivmoddi4+0x2c8>
 8000c28:	ebb1 050a 	subs.w	r5, r1, sl
 8000c2c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c30:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c34:	40fd      	lsrs	r5, r7
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	ea4c 0505 	orr.w	r5, ip, r5
 8000c3c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c40:	2700      	movs	r7, #0
 8000c42:	e747      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000c44:	f1c2 0320 	rsb	r3, r2, #32
 8000c48:	fa20 f703 	lsr.w	r7, r0, r3
 8000c4c:	4095      	lsls	r5, r2
 8000c4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c52:	fa21 f303 	lsr.w	r3, r1, r3
 8000c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5a:	4338      	orrs	r0, r7
 8000c5c:	0c01      	lsrs	r1, r0, #16
 8000c5e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c62:	fa1f f885 	uxth.w	r8, r5
 8000c66:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6e:	fb07 f308 	mul.w	r3, r7, r8
 8000c72:	428b      	cmp	r3, r1
 8000c74:	fa04 f402 	lsl.w	r4, r4, r2
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x256>
 8000c7a:	1869      	adds	r1, r5, r1
 8000c7c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c80:	d22f      	bcs.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d92d      	bls.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c86:	3f02      	subs	r7, #2
 8000c88:	4429      	add	r1, r5
 8000c8a:	1acb      	subs	r3, r1, r3
 8000c8c:	b281      	uxth	r1, r0
 8000c8e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c92:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c96:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9a:	fb00 f308 	mul.w	r3, r0, r8
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x27e>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca8:	d217      	bcs.n	8000cda <__udivmoddi4+0x2a6>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d915      	bls.n	8000cda <__udivmoddi4+0x2a6>
 8000cae:	3802      	subs	r0, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1ac9      	subs	r1, r1, r3
 8000cb4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cb8:	e73b      	b.n	8000b32 <__udivmoddi4+0xfe>
 8000cba:	4637      	mov	r7, r6
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	e709      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cc0:	4607      	mov	r7, r0
 8000cc2:	e6e7      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	e6fb      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc8:	4541      	cmp	r1, r8
 8000cca:	d2ab      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000ccc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cd0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cd4:	3801      	subs	r0, #1
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	e7a4      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cda:	4660      	mov	r0, ip
 8000cdc:	e7e9      	b.n	8000cb2 <__udivmoddi4+0x27e>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	e795      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce2:	4667      	mov	r7, ip
 8000ce4:	e7d1      	b.n	8000c8a <__udivmoddi4+0x256>
 8000ce6:	4681      	mov	r9, r0
 8000ce8:	e77c      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cea:	3802      	subs	r0, #2
 8000cec:	442c      	add	r4, r5
 8000cee:	e747      	b.n	8000b80 <__udivmoddi4+0x14c>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	442b      	add	r3, r5
 8000cf6:	e72f      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	e708      	b.n	8000b0e <__udivmoddi4+0xda>
 8000cfc:	4637      	mov	r7, r6
 8000cfe:	e6e9      	b.n	8000ad4 <__udivmoddi4+0xa0>

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	db0b      	blt.n	8000d2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	f003 021f 	and.w	r2, r3, #31
 8000d1c:	4907      	ldr	r1, [pc, #28]	; (8000d3c <__NVIC_EnableIRQ+0x38>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	095b      	lsrs	r3, r3, #5
 8000d24:	2001      	movs	r0, #1
 8000d26:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000e100 	.word	0xe000e100

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	; (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	; (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <MyAnalog_DMAInit>:

/**
  * @brief Congigure DMA only
  */
void MyAnalog_DMAInit(int Chan_Nb)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

	// validation Ck DMA
	RCC->AHB1ENR|=RCC_AHB1ENR_DMA1EN;
 8000d9c:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <MyAnalog_DMAInit+0x6c>)
 8000d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000da0:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <MyAnalog_DMAInit+0x6c>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6493      	str	r3, [r2, #72]	; 0x48
    // channel selection
	DMA1_CSELR->CSELR&=~0xF; // ADC1 sélectionné pour la DMA
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <MyAnalog_DMAInit+0x70>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <MyAnalog_DMAInit+0x70>)
 8000dae:	f023 030f 	bic.w	r3, r3, #15
 8000db2:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CPAR=ADC1_BASE+0x40; // adresse du DR
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MyAnalog_DMAInit+0x74>)
 8000db6:	4a15      	ldr	r2, [pc, #84]	; (8000e0c <MyAnalog_DMAInit+0x78>)
 8000db8:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR=(unsigned long)MyAnalog_DMA_Buffer;   // buffer d'arrivée
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <MyAnalog_DMAInit+0x74>)
 8000dbc:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <MyAnalog_DMAInit+0x7c>)
 8000dbe:	60da      	str	r2, [r3, #12]
	DMA1_Channel1->CNDTR=Chan_Nb;
 8000dc0:	4a11      	ldr	r2, [pc, #68]	; (8000e08 <MyAnalog_DMAInit+0x74>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6053      	str	r3, [r2, #4]
	// config channel : Higher Prio, Mem size 16 bits, periph Size 16bits, Inc Mem, Circular mode,
	DMA1_Channel1->CCR = DMA_CCR_PL| DMA_CCR_MSIZE_0|DMA_CCR_PSIZE_0|DMA_CCR_MINC|DMA_CCR_CIRC;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <MyAnalog_DMAInit+0x74>)
 8000dc8:	f243 52a0 	movw	r2, #13728	; 0x35a0
 8000dcc:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR&=~DMA_CCR_PINC; // No inc on perpih
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MyAnalog_DMAInit+0x74>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <MyAnalog_DMAInit+0x74>)
 8000dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000dd8:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR&=~DMA_CCR_DIR;  // Dir Periph to Mem
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <MyAnalog_DMAInit+0x74>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <MyAnalog_DMAInit+0x74>)
 8000de0:	f023 0310 	bic.w	r3, r3, #16
 8000de4:	6013      	str	r3, [r2, #0]
	// validation de la DMA
	DMA1_Channel1->CCR|=DMA_CCR_EN;
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <MyAnalog_DMAInit+0x74>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <MyAnalog_DMAInit+0x74>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6013      	str	r3, [r2, #0]
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000
 8000e04:	400200a8 	.word	0x400200a8
 8000e08:	40020008 	.word	0x40020008
 8000e0c:	50040040 	.word	0x50040040
 8000e10:	20000028 	.word	0x20000028

08000e14 <MyAnalog_Init>:
/**
  * @brief Termine la configuration ADC en DMA, lance le processus (le timer qui déclenche
  * l'ADC doit tourner !
  */
void MyAnalog_Init(int Chan_Nb)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

	  // Modifs conf HAL
	  ADC1->IER&=0; // plus aucune interruption autorisée
 8000e1c:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <MyAnalog_Init+0x88>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <MyAnalog_Init+0x88>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
	  // Activation ADC en DMA + adaptation ADC au mode circular de la DMA
	  ADC1->CFGR|=ADC_CFGR_DMACFG; // ADC pour une DMA en circular mode
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <MyAnalog_Init+0x88>)
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	4a1c      	ldr	r2, [pc, #112]	; (8000e9c <MyAnalog_Init+0x88>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	60d3      	str	r3, [r2, #12]
	  ADC1->CFGR|=ADC_CFGR_DMAEN;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MyAnalog_Init+0x88>)
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <MyAnalog_Init+0x88>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	60d3      	str	r3, [r2, #12]

	  // init DMA
	  MyAnalog_DMAInit(Chan_Nb);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ffa8 	bl	8000d94 <MyAnalog_DMAInit>
#if defined(Filter_Rank_1)||defined(Filter_Rank_2)||defined(Filter_Rank_3)||defined(Filter_Rank_4)\
 ||defined(Filter_Rank_5)||defined(Filter_Rank_6)||defined(Filter_Rank_7)\
 ||defined(Filter_Rank_8)||defined(Filter_Rank_9)||defined(Filter_Rank_10)

	  // Initialisation des filtres
      MyAnalog_Filter_Init();
 8000e44:	f000 f830 	bl	8000ea8 <MyAnalog_Filter_Init>
      // Activation IT DMA
      DMA1_Channel1->CCR&=~DMA_CCR_EN;
 8000e48:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <MyAnalog_Init+0x8c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <MyAnalog_Init+0x8c>)
 8000e4e:	f023 0301 	bic.w	r3, r3, #1
 8000e52:	6013      	str	r3, [r2, #0]
      DMA1_Channel1->CCR|=DMA_CCR_TCIE;
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <MyAnalog_Init+0x8c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <MyAnalog_Init+0x8c>)
 8000e5a:	f043 0302 	orr.w	r3, r3, #2
 8000e5e:	6013      	str	r3, [r2, #0]
      DMA1_Channel1->CCR|=DMA_CCR_EN;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MyAnalog_Init+0x8c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <MyAnalog_Init+0x8c>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6013      	str	r3, [r2, #0]
	  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e6c:	200b      	movs	r0, #11
 8000e6e:	f7ff ff49 	bl	8000d04 <__NVIC_EnableIRQ>
	  NVIC_SetPriority(DMA1_Channel1_IRQn,DMA_Prio);
 8000e72:	2101      	movs	r1, #1
 8000e74:	200b      	movs	r0, #11
 8000e76:	f7ff ff63 	bl	8000d40 <__NVIC_SetPriority>

#endif

	  // Validation ADC
	  ADC1->CR|=ADC_CR_ADEN;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MyAnalog_Init+0x88>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <MyAnalog_Init+0x88>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6093      	str	r3, [r2, #8]
	  // Lancement ADC
	  ADC1->CR|=ADC_CR_ADSTART;
 8000e86:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <MyAnalog_Init+0x88>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <MyAnalog_Init+0x88>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	6093      	str	r3, [r2, #8]
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	50040000 	.word	0x50040000
 8000ea0:	40020008 	.word	0x40020008
 8000ea4:	00000000 	.word	0x00000000

08000ea8 <MyAnalog_Filter_Init>:

/*
 * Fonction d'initialisation des filtres
 */
void MyAnalog_Filter_Init(void)
{
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0

#endif

#ifdef Filter_Rank_1
#ifdef FirstOrder_Rank1
   a=1.0/(2.0*(pi)*(Fc1)); // a = tau
 8000eae:	4ba0      	ldr	r3, [pc, #640]	; (8001130 <MyAnalog_Filter_Init+0x288>)
 8000eb0:	60fb      	str	r3, [r7, #12]
   F1_b2=1.0+2.0*a/(Te); // nb ici on devrait avoir b0 et non b2, question de déclaration var...
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	f7ff faec 	bl	8000490 <__aeabi_f2d>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	f7ff f98a 	bl	80001d4 <__adddf3>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	460c      	mov	r4, r1
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	4621      	mov	r1, r4
 8000ec8:	a395      	add	r3, pc, #596	; (adr r3, 8001120 <MyAnalog_Filter_Init+0x278>)
 8000eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ece:	f7ff fc61 	bl	8000794 <__aeabi_ddiv>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	460c      	mov	r4, r1
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	4621      	mov	r1, r4
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	4b95      	ldr	r3, [pc, #596]	; (8001134 <MyAnalog_Filter_Init+0x28c>)
 8000ee0:	f7ff f978 	bl	80001d4 <__adddf3>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	460c      	mov	r4, r1
 8000ee8:	4618      	mov	r0, r3
 8000eea:	4621      	mov	r1, r4
 8000eec:	f7ff fd3a 	bl	8000964 <__aeabi_d2f>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	4b91      	ldr	r3, [pc, #580]	; (8001138 <MyAnalog_Filter_Init+0x290>)
 8000ef4:	601a      	str	r2, [r3, #0]
   F1_b2=1.0/F1_b2; // inversion b0 pour faire une multi et non une div dans la récur.
 8000ef6:	4b90      	ldr	r3, [pc, #576]	; (8001138 <MyAnalog_Filter_Init+0x290>)
 8000ef8:	ed93 7a00 	vldr	s14, [r3]
 8000efc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000f00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f04:	4b8c      	ldr	r3, [pc, #560]	; (8001138 <MyAnalog_Filter_Init+0x290>)
 8000f06:	edc3 7a00 	vstr	s15, [r3]
   F1_b1=1.0-2.0*a/(Te);
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	f7ff fac0 	bl	8000490 <__aeabi_f2d>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	f7ff f95e 	bl	80001d4 <__adddf3>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	460c      	mov	r4, r1
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	4621      	mov	r1, r4
 8000f20:	a37f      	add	r3, pc, #508	; (adr r3, 8001120 <MyAnalog_Filter_Init+0x278>)
 8000f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f26:	f7ff fc35 	bl	8000794 <__aeabi_ddiv>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	460c      	mov	r4, r1
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4623      	mov	r3, r4
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	497f      	ldr	r1, [pc, #508]	; (8001134 <MyAnalog_Filter_Init+0x28c>)
 8000f38:	f7ff f94a 	bl	80001d0 <__aeabi_dsub>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	460c      	mov	r4, r1
 8000f40:	4618      	mov	r0, r3
 8000f42:	4621      	mov	r1, r4
 8000f44:	f7ff fd0e 	bl	8000964 <__aeabi_d2f>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	4b7c      	ldr	r3, [pc, #496]	; (800113c <MyAnalog_Filter_Init+0x294>)
 8000f4c:	601a      	str	r2, [r3, #0]
	F1_b1=b/a;
	b=1.0-(4.0*(m))/(wnTe)+4.0/(wnTe*wnTe);
	F1_b2=b/a;
#endif
	 // mise à 0 des mémoires
	 MyAnalog_Sn_Filter[0]=0;
 8000f4e:	4b7c      	ldr	r3, [pc, #496]	; (8001140 <MyAnalog_Filter_Init+0x298>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	801a      	strh	r2, [r3, #0]
	 F1_en=0.0;
 8000f54:	4b7b      	ldr	r3, [pc, #492]	; (8001144 <MyAnalog_Filter_Init+0x29c>)
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
	 F1_en1=0.0;
 8000f5c:	4b7a      	ldr	r3, [pc, #488]	; (8001148 <MyAnalog_Filter_Init+0x2a0>)
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
	 F1_en2=0.0;
 8000f64:	4b79      	ldr	r3, [pc, #484]	; (800114c <MyAnalog_Filter_Init+0x2a4>)
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
	 F1_sn=0.0;
 8000f6c:	4b78      	ldr	r3, [pc, #480]	; (8001150 <MyAnalog_Filter_Init+0x2a8>)
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
	 F1_sn1=0.0;
 8000f74:	4b77      	ldr	r3, [pc, #476]	; (8001154 <MyAnalog_Filter_Init+0x2ac>)
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
	 F1_sn2=0.0;
 8000f7c:	4b76      	ldr	r3, [pc, #472]	; (8001158 <MyAnalog_Filter_Init+0x2b0>)
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
#endif

#ifdef Filter_Rank_2
	wnTe=2*(pi)*(Fc2)*(Te);
 8000f84:	4b75      	ldr	r3, [pc, #468]	; (800115c <MyAnalog_Filter_Init+0x2b4>)
 8000f86:	60bb      	str	r3, [r7, #8]
	a=1.0+(4.0*(m))/(wnTe) + 4.0/(wnTe*wnTe);
 8000f88:	68b8      	ldr	r0, [r7, #8]
 8000f8a:	f7ff fa81 	bl	8000490 <__aeabi_f2d>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	460c      	mov	r4, r1
 8000f92:	461a      	mov	r2, r3
 8000f94:	4623      	mov	r3, r4
 8000f96:	a164      	add	r1, pc, #400	; (adr r1, 8001128 <MyAnalog_Filter_Init+0x280>)
 8000f98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f9c:	f7ff fbfa 	bl	8000794 <__aeabi_ddiv>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	460c      	mov	r4, r1
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	4621      	mov	r1, r4
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	4b61      	ldr	r3, [pc, #388]	; (8001134 <MyAnalog_Filter_Init+0x28c>)
 8000fae:	f7ff f911 	bl	80001d4 <__adddf3>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460c      	mov	r4, r1
 8000fb6:	4625      	mov	r5, r4
 8000fb8:	461c      	mov	r4, r3
 8000fba:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc6:	ee17 0a90 	vmov	r0, s15
 8000fca:	f7ff fa61 	bl	8000490 <__aeabi_f2d>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	f04f 0000 	mov.w	r0, #0
 8000fd6:	4962      	ldr	r1, [pc, #392]	; (8001160 <MyAnalog_Filter_Init+0x2b8>)
 8000fd8:	f7ff fbdc 	bl	8000794 <__aeabi_ddiv>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	4629      	mov	r1, r5
 8000fe4:	f7ff f8f6 	bl	80001d4 <__adddf3>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	460c      	mov	r4, r1
 8000fec:	4618      	mov	r0, r3
 8000fee:	4621      	mov	r1, r4
 8000ff0:	f7ff fcb8 	bl	8000964 <__aeabi_d2f>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60fb      	str	r3, [r7, #12]
	F2_a0=1.0/a; // mal nommé, 1/F2_b0 en fait
 8000ff8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000ffc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001004:	4b57      	ldr	r3, [pc, #348]	; (8001164 <MyAnalog_Filter_Init+0x2bc>)
 8001006:	edc3 7a00 	vstr	s15, [r3]
	F2_a1=2.0;
 800100a:	4b57      	ldr	r3, [pc, #348]	; (8001168 <MyAnalog_Filter_Init+0x2c0>)
 800100c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001010:	601a      	str	r2, [r3, #0]
	F2_a2=F2_a0;
 8001012:	4b54      	ldr	r3, [pc, #336]	; (8001164 <MyAnalog_Filter_Init+0x2bc>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a55      	ldr	r2, [pc, #340]	; (800116c <MyAnalog_Filter_Init+0x2c4>)
 8001018:	6013      	str	r3, [r2, #0]
    // sn = 1/b0*(en+2.0*en1+en2-b1sn1-b2sn2
	b=2.0-8.0/(wnTe*wnTe);
 800101a:	ed97 7a02 	vldr	s14, [r7, #8]
 800101e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001026:	ee17 0a90 	vmov	r0, s15
 800102a:	f7ff fa31 	bl	8000490 <__aeabi_f2d>
 800102e:	4603      	mov	r3, r0
 8001030:	460c      	mov	r4, r1
 8001032:	461a      	mov	r2, r3
 8001034:	4623      	mov	r3, r4
 8001036:	f04f 0000 	mov.w	r0, #0
 800103a:	494d      	ldr	r1, [pc, #308]	; (8001170 <MyAnalog_Filter_Init+0x2c8>)
 800103c:	f7ff fbaa 	bl	8000794 <__aeabi_ddiv>
 8001040:	4603      	mov	r3, r0
 8001042:	460c      	mov	r4, r1
 8001044:	461a      	mov	r2, r3
 8001046:	4623      	mov	r3, r4
 8001048:	f04f 0000 	mov.w	r0, #0
 800104c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001050:	f7ff f8be 	bl	80001d0 <__aeabi_dsub>
 8001054:	4603      	mov	r3, r0
 8001056:	460c      	mov	r4, r1
 8001058:	4618      	mov	r0, r3
 800105a:	4621      	mov	r1, r4
 800105c:	f7ff fc82 	bl	8000964 <__aeabi_d2f>
 8001060:	4603      	mov	r3, r0
 8001062:	607b      	str	r3, [r7, #4]
	F2_b1=b;
 8001064:	4a43      	ldr	r2, [pc, #268]	; (8001174 <MyAnalog_Filter_Init+0x2cc>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
	b=1.0-(4.0*(m))/(wnTe)+4.0/(wnTe*wnTe);
 800106a:	68b8      	ldr	r0, [r7, #8]
 800106c:	f7ff fa10 	bl	8000490 <__aeabi_f2d>
 8001070:	4603      	mov	r3, r0
 8001072:	460c      	mov	r4, r1
 8001074:	461a      	mov	r2, r3
 8001076:	4623      	mov	r3, r4
 8001078:	a12b      	add	r1, pc, #172	; (adr r1, 8001128 <MyAnalog_Filter_Init+0x280>)
 800107a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800107e:	f7ff fb89 	bl	8000794 <__aeabi_ddiv>
 8001082:	4603      	mov	r3, r0
 8001084:	460c      	mov	r4, r1
 8001086:	461a      	mov	r2, r3
 8001088:	4623      	mov	r3, r4
 800108a:	f04f 0000 	mov.w	r0, #0
 800108e:	4929      	ldr	r1, [pc, #164]	; (8001134 <MyAnalog_Filter_Init+0x28c>)
 8001090:	f7ff f89e 	bl	80001d0 <__aeabi_dsub>
 8001094:	4603      	mov	r3, r0
 8001096:	460c      	mov	r4, r1
 8001098:	4625      	mov	r5, r4
 800109a:	461c      	mov	r4, r3
 800109c:	ed97 7a02 	vldr	s14, [r7, #8]
 80010a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80010a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a8:	ee17 0a90 	vmov	r0, s15
 80010ac:	f7ff f9f0 	bl	8000490 <__aeabi_f2d>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	f04f 0000 	mov.w	r0, #0
 80010b8:	4929      	ldr	r1, [pc, #164]	; (8001160 <MyAnalog_Filter_Init+0x2b8>)
 80010ba:	f7ff fb6b 	bl	8000794 <__aeabi_ddiv>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4620      	mov	r0, r4
 80010c4:	4629      	mov	r1, r5
 80010c6:	f7ff f885 	bl	80001d4 <__adddf3>
 80010ca:	4603      	mov	r3, r0
 80010cc:	460c      	mov	r4, r1
 80010ce:	4618      	mov	r0, r3
 80010d0:	4621      	mov	r1, r4
 80010d2:	f7ff fc47 	bl	8000964 <__aeabi_d2f>
 80010d6:	4603      	mov	r3, r0
 80010d8:	607b      	str	r3, [r7, #4]
	F2_b2=b;
 80010da:	4a27      	ldr	r2, [pc, #156]	; (8001178 <MyAnalog_Filter_Init+0x2d0>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6013      	str	r3, [r2, #0]

	 // mise à 0 des mémoires
	 MyAnalog_Sn_Filter[1]=0;
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <MyAnalog_Filter_Init+0x298>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	805a      	strh	r2, [r3, #2]
	 F2_en=0.0;
 80010e6:	4b25      	ldr	r3, [pc, #148]	; (800117c <MyAnalog_Filter_Init+0x2d4>)
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
	 F2_en1=0.0;
 80010ee:	4b24      	ldr	r3, [pc, #144]	; (8001180 <MyAnalog_Filter_Init+0x2d8>)
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
	 F2_en2=0.0;
 80010f6:	4b23      	ldr	r3, [pc, #140]	; (8001184 <MyAnalog_Filter_Init+0x2dc>)
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
	 F2_sn=0.0;
 80010fe:	4b22      	ldr	r3, [pc, #136]	; (8001188 <MyAnalog_Filter_Init+0x2e0>)
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
	 F2_sn1=0.0;
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <MyAnalog_Filter_Init+0x2e4>)
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
	 F2_sn2=0.0;
 800110e:	4b20      	ldr	r3, [pc, #128]	; (8001190 <MyAnalog_Filter_Init+0x2e8>)
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
	 F10_en2=0.0;
	 F10_sn=0.0;
	 F10_sn1=0.0;
	 F10_sn2=0.0;
#endif
}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bdb0      	pop	{r4, r5, r7, pc}
 800111e:	bf00      	nop
 8001120:	88e368f1 	.word	0x88e368f1
 8001124:	3f04f8b5 	.word	0x3f04f8b5
 8001128:	6665983e 	.word	0x6665983e
 800112c:	4006a09e 	.word	0x4006a09e
 8001130:	3ad09b8a 	.word	0x3ad09b8a
 8001134:	3ff00000 	.word	0x3ff00000
 8001138:	200000ac 	.word	0x200000ac
 800113c:	200000a8 	.word	0x200000a8
 8001140:	20000068 	.word	0x20000068
 8001144:	200000b0 	.word	0x200000b0
 8001148:	200000b4 	.word	0x200000b4
 800114c:	200000b8 	.word	0x200000b8
 8001150:	200000bc 	.word	0x200000bc
 8001154:	200000c0 	.word	0x200000c0
 8001158:	200000c4 	.word	0x200000c4
 800115c:	3d4de32e 	.word	0x3d4de32e
 8001160:	40100000 	.word	0x40100000
 8001164:	200000c8 	.word	0x200000c8
 8001168:	200000cc 	.word	0x200000cc
 800116c:	200000d0 	.word	0x200000d0
 8001170:	40200000 	.word	0x40200000
 8001174:	200000d4 	.word	0x200000d4
 8001178:	200000d8 	.word	0x200000d8
 800117c:	200000dc 	.word	0x200000dc
 8001180:	200000e0 	.word	0x200000e0
 8001184:	200000e4 	.word	0x200000e4
 8001188:	200000e8 	.word	0x200000e8
 800118c:	200000ec 	.word	0x200000ec
 8001190:	200000f0 	.word	0x200000f0

08001194 <ADC1_2_IRQHandler>:

/**
  * @brief Pulse Led 2 on EOC ADC
  */
void ADC1_2_IRQHandler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  GPIOA->BSRR=GPIO_PIN_5;  //-- set IO
 8001198:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800119c:	2220      	movs	r2, #32
 800119e:	619a      	str	r2, [r3, #24]
  ADC1->ISR|=ADC_ISR_EOC; //-- release flag EOC
 80011a0:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <ADC1_2_IRQHandler+0x2c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <ADC1_2_IRQHandler+0x2c>)
 80011a6:	f043 0304 	orr.w	r3, r3, #4
 80011aa:	6013      	str	r3, [r2, #0]
  GPIOA->BRR=GPIO_PIN_5; //-- reset IO
 80011ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011b0:	2220      	movs	r2, #32
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	50040000 	.word	0x50040000

080011c4 <DMA1_Channel1_IRQHandler>:
/**
  * @brief Traitement des filtres, appel callback
  */

void DMA1_Channel1_IRQHandler (void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0


   DMA1->IFCR|=DMA_IFCR_CTCIF1; //-- release flag DMA
 80011c8:	4b56      	ldr	r3, [pc, #344]	; (8001324 <DMA1_Channel1_IRQHandler+0x160>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	4a55      	ldr	r2, [pc, #340]	; (8001324 <DMA1_Channel1_IRQHandler+0x160>)
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	6053      	str	r3, [r2, #4]
	 GPIOA->BSRR=GPIO_PIN_5;  //-- set IO
 80011d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011d8:	2220      	movs	r2, #32
 80011da:	619a      	str	r2, [r3, #24]

#ifdef Filter_Rank_1
#ifdef FirstOrder_Rank1
   // récupération en
   F1_en=(float)MyAnalog_DMA_Buffer[0];
 80011dc:	4b52      	ldr	r3, [pc, #328]	; (8001328 <DMA1_Channel1_IRQHandler+0x164>)
 80011de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e2:	ee07 3a90 	vmov	s15, r3
 80011e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ea:	4b50      	ldr	r3, [pc, #320]	; (800132c <DMA1_Channel1_IRQHandler+0x168>)
 80011ec:	edc3 7a00 	vstr	s15, [r3]
   GPIOA->BRR=GPIO_PIN_5; //-- reset IO
 80011f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011f4:	2220      	movs	r2, #32
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28
   // calcul sn ordre 1, nb : b0 (b2) est inversé pour un multi et non une div
   // a0 = a1 = 1
   // sn = (en + en-1-b1*sn-1)/b0

   sn=F1_b2*(F1_en+F1_en1-F1_b1*F1_sn1);
 80011f8:	4b4c      	ldr	r3, [pc, #304]	; (800132c <DMA1_Channel1_IRQHandler+0x168>)
 80011fa:	ed93 7a00 	vldr	s14, [r3]
 80011fe:	4b4c      	ldr	r3, [pc, #304]	; (8001330 <DMA1_Channel1_IRQHandler+0x16c>)
 8001200:	edd3 7a00 	vldr	s15, [r3]
 8001204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001208:	4b4a      	ldr	r3, [pc, #296]	; (8001334 <DMA1_Channel1_IRQHandler+0x170>)
 800120a:	edd3 6a00 	vldr	s13, [r3]
 800120e:	4b4a      	ldr	r3, [pc, #296]	; (8001338 <DMA1_Channel1_IRQHandler+0x174>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001218:	ee37 7a67 	vsub.f32	s14, s14, s15
 800121c:	4b47      	ldr	r3, [pc, #284]	; (800133c <DMA1_Channel1_IRQHandler+0x178>)
 800121e:	edd3 7a00 	vldr	s15, [r3]
 8001222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001226:	4b46      	ldr	r3, [pc, #280]	; (8001340 <DMA1_Channel1_IRQHandler+0x17c>)
 8001228:	edc3 7a00 	vstr	s15, [r3]


	F1_sn1=sn;
 800122c:	4b44      	ldr	r3, [pc, #272]	; (8001340 <DMA1_Channel1_IRQHandler+0x17c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a41      	ldr	r2, [pc, #260]	; (8001338 <DMA1_Channel1_IRQHandler+0x174>)
 8001232:	6013      	str	r3, [r2, #0]
	F1_en1=F1_en;
 8001234:	4b3d      	ldr	r3, [pc, #244]	; (800132c <DMA1_Channel1_IRQHandler+0x168>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a3d      	ldr	r2, [pc, #244]	; (8001330 <DMA1_Channel1_IRQHandler+0x16c>)
 800123a:	6013      	str	r3, [r2, #0]

	// stockage

	MyAnalog_Sn_Filter[0]=(int)sn;
 800123c:	4b40      	ldr	r3, [pc, #256]	; (8001340 <DMA1_Channel1_IRQHandler+0x17c>)
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001246:	ee17 3a90 	vmov	r3, s15
 800124a:	b21a      	sxth	r2, r3
 800124c:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <DMA1_Channel1_IRQHandler+0x180>)
 800124e:	801a      	strh	r2, [r3, #0]
#endif
#endif

#ifdef Filter_Rank_2
    // récupération en
	 GPIOA->BSRR=GPIO_PIN_5;  //-- set IO
 8001250:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001254:	2220      	movs	r2, #32
 8001256:	619a      	str	r2, [r3, #24]
    F2_en=(float)MyAnalog_DMA_Buffer[1];
 8001258:	4b33      	ldr	r3, [pc, #204]	; (8001328 <DMA1_Channel1_IRQHandler+0x164>)
 800125a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800125e:	ee07 3a90 	vmov	s15, r3
 8001262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001266:	4b38      	ldr	r3, [pc, #224]	; (8001348 <DMA1_Channel1_IRQHandler+0x184>)
 8001268:	edc3 7a00 	vstr	s15, [r3]


    //sn=F2_a0*(F2_en+2.0f*F2_en1+F2_en2-F2_b1*F2_sn1-F2_b2*F2_sn2);
	sn=F2_a0*F2_en+F2_a1*F2_en1+F2_a2*F2_en2-F2_b1*F2_sn1-F2_b2*F2_sn2;
 800126c:	4b37      	ldr	r3, [pc, #220]	; (800134c <DMA1_Channel1_IRQHandler+0x188>)
 800126e:	ed93 7a00 	vldr	s14, [r3]
 8001272:	4b35      	ldr	r3, [pc, #212]	; (8001348 <DMA1_Channel1_IRQHandler+0x184>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127c:	4b34      	ldr	r3, [pc, #208]	; (8001350 <DMA1_Channel1_IRQHandler+0x18c>)
 800127e:	edd3 6a00 	vldr	s13, [r3]
 8001282:	4b34      	ldr	r3, [pc, #208]	; (8001354 <DMA1_Channel1_IRQHandler+0x190>)
 8001284:	edd3 7a00 	vldr	s15, [r3]
 8001288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001290:	4b31      	ldr	r3, [pc, #196]	; (8001358 <DMA1_Channel1_IRQHandler+0x194>)
 8001292:	edd3 6a00 	vldr	s13, [r3]
 8001296:	4b31      	ldr	r3, [pc, #196]	; (800135c <DMA1_Channel1_IRQHandler+0x198>)
 8001298:	edd3 7a00 	vldr	s15, [r3]
 800129c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012a4:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <DMA1_Channel1_IRQHandler+0x19c>)
 80012a6:	edd3 6a00 	vldr	s13, [r3]
 80012aa:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <DMA1_Channel1_IRQHandler+0x1a0>)
 80012ac:	edd3 7a00 	vldr	s15, [r3]
 80012b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012b8:	4b2b      	ldr	r3, [pc, #172]	; (8001368 <DMA1_Channel1_IRQHandler+0x1a4>)
 80012ba:	edd3 6a00 	vldr	s13, [r3]
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <DMA1_Channel1_IRQHandler+0x1a8>)
 80012c0:	edd3 7a00 	vldr	s15, [r3]
 80012c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <DMA1_Channel1_IRQHandler+0x17c>)
 80012ce:	edc3 7a00 	vstr	s15, [r3]

	F2_sn2=F2_sn1;
 80012d2:	4b24      	ldr	r3, [pc, #144]	; (8001364 <DMA1_Channel1_IRQHandler+0x1a0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a25      	ldr	r2, [pc, #148]	; (800136c <DMA1_Channel1_IRQHandler+0x1a8>)
 80012d8:	6013      	str	r3, [r2, #0]
	F2_sn1=sn;
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <DMA1_Channel1_IRQHandler+0x17c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a21      	ldr	r2, [pc, #132]	; (8001364 <DMA1_Channel1_IRQHandler+0x1a0>)
 80012e0:	6013      	str	r3, [r2, #0]
	F2_en2=F2_en1;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <DMA1_Channel1_IRQHandler+0x190>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a1d      	ldr	r2, [pc, #116]	; (800135c <DMA1_Channel1_IRQHandler+0x198>)
 80012e8:	6013      	str	r3, [r2, #0]
	F2_en1=F2_en;
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <DMA1_Channel1_IRQHandler+0x184>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a19      	ldr	r2, [pc, #100]	; (8001354 <DMA1_Channel1_IRQHandler+0x190>)
 80012f0:	6013      	str	r3, [r2, #0]

	// stockage

	MyAnalog_Sn_Filter[1]=(int)sn;
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <DMA1_Channel1_IRQHandler+0x17c>)
 80012f4:	edd3 7a00 	vldr	s15, [r3]
 80012f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012fc:	ee17 3a90 	vmov	r3, s15
 8001300:	b21a      	sxth	r2, r3
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <DMA1_Channel1_IRQHandler+0x180>)
 8001304:	805a      	strh	r2, [r3, #2]

    GPIOA->BRR=GPIO_PIN_5; //-- reset IO
 8001306:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800130a:	2220      	movs	r2, #32
 800130c:	629a      	str	r2, [r3, #40]	; 0x28
	// stockage
	MyAnalog_Sn_Filter[9]=(int)sn;
#endif

	// sortie DAC
    DAC1->DHR12R1=MyAnalog_Sn_Filter[0];
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <DMA1_Channel1_IRQHandler+0x180>)
 8001310:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <DMA1_Channel1_IRQHandler+0x1ac>)
 8001316:	609a      	str	r2, [r3, #8]



}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40020000 	.word	0x40020000
 8001328:	20000028 	.word	0x20000028
 800132c:	200000b0 	.word	0x200000b0
 8001330:	200000b4 	.word	0x200000b4
 8001334:	200000a8 	.word	0x200000a8
 8001338:	200000c0 	.word	0x200000c0
 800133c:	200000ac 	.word	0x200000ac
 8001340:	200000f4 	.word	0x200000f4
 8001344:	20000068 	.word	0x20000068
 8001348:	200000dc 	.word	0x200000dc
 800134c:	200000c8 	.word	0x200000c8
 8001350:	200000cc 	.word	0x200000cc
 8001354:	200000e0 	.word	0x200000e0
 8001358:	200000d0 	.word	0x200000d0
 800135c:	200000e4 	.word	0x200000e4
 8001360:	200000d4 	.word	0x200000d4
 8001364:	200000ec 	.word	0x200000ec
 8001368:	200000d8 	.word	0x200000d8
 800136c:	200000f0 	.word	0x200000f0
 8001370:	40007400 	.word	0x40007400

08001374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001378:	f000 fc16 	bl	8001ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137c:	f000 f826 	bl	80013cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001380:	f000 fa1a 	bl	80017b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001384:	f000 f9e8 	bl	8001758 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001388:	f000 f892 	bl	80014b0 <MX_ADC1_Init>
  MX_TIM6_Init();
 800138c:	f000 f9ae 	bl	80016ec <MX_TIM6_Init>
  MX_DAC1_Init();
 8001390:	f000 f97a 	bl	8001688 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  //---- Calibration ADC
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001394:	217f      	movs	r1, #127	; 0x7f
 8001396:	4809      	ldr	r0, [pc, #36]	; (80013bc <main+0x48>)
 8001398:	f001 fc43 	bl	8002c22 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc1,ADC_DIFFERENTIAL_ENDED);
 800139c:	4908      	ldr	r1, [pc, #32]	; (80013c0 <main+0x4c>)
 800139e:	4807      	ldr	r0, [pc, #28]	; (80013bc <main+0x48>)
 80013a0:	f001 fc3f 	bl	8002c22 <HAL_ADCEx_Calibration_Start>

  // ---- validation DAC
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80013a4:	2100      	movs	r1, #0
 80013a6:	4807      	ldr	r0, [pc, #28]	; (80013c4 <main+0x50>)
 80013a8:	f001 fe4f 	bl	800304a <HAL_DAC_Start>

  //---- Config Analog part on 2 channels
  MyAnalog_Init(10);
 80013ac:	200a      	movs	r0, #10
 80013ae:	f7ff fd31 	bl	8000e14 <MyAnalog_Init>



  //---- Lancement Timer 6
  HAL_TIM_Base_Start_IT(&htim6);
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <main+0x54>)
 80013b4:	f003 fcc6 	bl	8004d44 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <main+0x44>
 80013ba:	bf00      	nop
 80013bc:	20000114 	.word	0x20000114
 80013c0:	407f0000 	.word	0x407f0000
 80013c4:	20000100 	.word	0x20000100
 80013c8:	2000017c 	.word	0x2000017c

080013cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b0b8      	sub	sp, #224	; 0xe0
 80013d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013d6:	2244      	movs	r2, #68	; 0x44
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f004 faa2 	bl	8005924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f0:	463b      	mov	r3, r7
 80013f2:	2288      	movs	r2, #136	; 0x88
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f004 fa94 	bl	8005924 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013fc:	2301      	movs	r3, #1
 80013fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001402:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140a:	2302      	movs	r3, #2
 800140c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001410:	2303      	movs	r3, #3
 8001412:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001416:	2301      	movs	r3, #1
 8001418:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 800141c:	2314      	movs	r3, #20
 800141e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001422:	2307      	movs	r3, #7
 8001424:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001428:	2302      	movs	r3, #2
 800142a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800142e:	2302      	movs	r3, #2
 8001430:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001434:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001438:	4618      	mov	r0, r3
 800143a:	f002 f991 	bl	8003760 <HAL_RCC_OscConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001444:	f000 fa20 	bl	8001888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001448:	230f      	movs	r3, #15
 800144a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144e:	2303      	movs	r3, #3
 8001450:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001466:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800146a:	2104      	movs	r1, #4
 800146c:	4618      	mov	r0, r3
 800146e:	f002 fd5d 	bl	8003f2c <HAL_RCC_ClockConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001478:	f000 fa06 	bl	8001888 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800147c:	2302      	movs	r3, #2
 800147e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001480:	2300      	movs	r3, #0
 8001482:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001484:	463b      	mov	r3, r7
 8001486:	4618      	mov	r0, r3
 8001488:	f002 ff54 	bl	8004334 <HAL_RCCEx_PeriphCLKConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001492:	f000 f9f9 	bl	8001888 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001496:	f44f 7000 	mov.w	r0, #512	; 0x200
 800149a:	f002 f90b 	bl	80036b4 <HAL_PWREx_ControlVoltageScaling>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80014a4:	f000 f9f0 	bl	8001888 <Error_Handler>
  }
}
 80014a8:	bf00      	nop
 80014aa:	37e0      	adds	r7, #224	; 0xe0
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80014d2:	4b6a      	ldr	r3, [pc, #424]	; (800167c <MX_ADC1_Init+0x1cc>)
 80014d4:	4a6a      	ldr	r2, [pc, #424]	; (8001680 <MX_ADC1_Init+0x1d0>)
 80014d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014d8:	4b68      	ldr	r3, [pc, #416]	; (800167c <MX_ADC1_Init+0x1cc>)
 80014da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014e0:	4b66      	ldr	r3, [pc, #408]	; (800167c <MX_ADC1_Init+0x1cc>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014e6:	4b65      	ldr	r3, [pc, #404]	; (800167c <MX_ADC1_Init+0x1cc>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014ec:	4b63      	ldr	r3, [pc, #396]	; (800167c <MX_ADC1_Init+0x1cc>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014f2:	4b62      	ldr	r3, [pc, #392]	; (800167c <MX_ADC1_Init+0x1cc>)
 80014f4:	2204      	movs	r2, #4
 80014f6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014f8:	4b60      	ldr	r3, [pc, #384]	; (800167c <MX_ADC1_Init+0x1cc>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014fe:	4b5f      	ldr	r3, [pc, #380]	; (800167c <MX_ADC1_Init+0x1cc>)
 8001500:	2200      	movs	r2, #0
 8001502:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 8001504:	4b5d      	ldr	r3, [pc, #372]	; (800167c <MX_ADC1_Init+0x1cc>)
 8001506:	220a      	movs	r2, #10
 8001508:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800150a:	4b5c      	ldr	r3, [pc, #368]	; (800167c <MX_ADC1_Init+0x1cc>)
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001512:	4b5a      	ldr	r3, [pc, #360]	; (800167c <MX_ADC1_Init+0x1cc>)
 8001514:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 8001518:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800151a:	4b58      	ldr	r3, [pc, #352]	; (800167c <MX_ADC1_Init+0x1cc>)
 800151c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001520:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001522:	4b56      	ldr	r3, [pc, #344]	; (800167c <MX_ADC1_Init+0x1cc>)
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800152a:	4b54      	ldr	r3, [pc, #336]	; (800167c <MX_ADC1_Init+0x1cc>)
 800152c:	2200      	movs	r2, #0
 800152e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001530:	4b52      	ldr	r3, [pc, #328]	; (800167c <MX_ADC1_Init+0x1cc>)
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001538:	4850      	ldr	r0, [pc, #320]	; (800167c <MX_ADC1_Init+0x1cc>)
 800153a:	f000 fd85 	bl	8002048 <HAL_ADC_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001544:	f000 f9a0 	bl	8001888 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	484a      	ldr	r0, [pc, #296]	; (800167c <MX_ADC1_Init+0x1cc>)
 8001554:	f001 fbc6 	bl	8002ce4 <HAL_ADCEx_MultiModeConfigChannel>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800155e:	f000 f993 	bl	8001888 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001562:	4b48      	ldr	r3, [pc, #288]	; (8001684 <MX_ADC1_Init+0x1d4>)
 8001564:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001566:	2306      	movs	r3, #6
 8001568:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800156e:	237f      	movs	r3, #127	; 0x7f
 8001570:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001572:	2304      	movs	r3, #4
 8001574:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	4619      	mov	r1, r3
 800157e:	483f      	ldr	r0, [pc, #252]	; (800167c <MX_ADC1_Init+0x1cc>)
 8001580:	f000 feb6 	bl	80022f0 <HAL_ADC_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800158a:	f000 f97d 	bl	8001888 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800158e:	230c      	movs	r3, #12
 8001590:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	4619      	mov	r1, r3
 8001596:	4839      	ldr	r0, [pc, #228]	; (800167c <MX_ADC1_Init+0x1cc>)
 8001598:	f000 feaa 	bl	80022f0 <HAL_ADC_ConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80015a2:	f000 f971 	bl	8001888 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015a6:	2312      	movs	r3, #18
 80015a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	4619      	mov	r1, r3
 80015ae:	4833      	ldr	r0, [pc, #204]	; (800167c <MX_ADC1_Init+0x1cc>)
 80015b0:	f000 fe9e 	bl	80022f0 <HAL_ADC_ConfigChannel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 80015ba:	f000 f965 	bl	8001888 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015be:	2318      	movs	r3, #24
 80015c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	482d      	ldr	r0, [pc, #180]	; (800167c <MX_ADC1_Init+0x1cc>)
 80015c8:	f000 fe92 	bl	80022f0 <HAL_ADC_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80015d2:	f000 f959 	bl	8001888 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80015d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	4619      	mov	r1, r3
 80015e0:	4826      	ldr	r0, [pc, #152]	; (800167c <MX_ADC1_Init+0x1cc>)
 80015e2:	f000 fe85 	bl	80022f0 <HAL_ADC_ConfigChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 80015ec:	f000 f94c 	bl	8001888 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80015f0:	f44f 7383 	mov.w	r3, #262	; 0x106
 80015f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	4619      	mov	r1, r3
 80015fa:	4820      	ldr	r0, [pc, #128]	; (800167c <MX_ADC1_Init+0x1cc>)
 80015fc:	f000 fe78 	bl	80022f0 <HAL_ADC_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 8001606:	f000 f93f 	bl	8001888 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800160a:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800160e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	4619      	mov	r1, r3
 8001614:	4819      	ldr	r0, [pc, #100]	; (800167c <MX_ADC1_Init+0x1cc>)
 8001616:	f000 fe6b 	bl	80022f0 <HAL_ADC_ConfigChannel>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 8001620:	f000 f932 	bl	8001888 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001624:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001628:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	4619      	mov	r1, r3
 800162e:	4813      	ldr	r0, [pc, #76]	; (800167c <MX_ADC1_Init+0x1cc>)
 8001630:	f000 fe5e 	bl	80022f0 <HAL_ADC_ConfigChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800163a:	f000 f925 	bl	8001888 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800163e:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001642:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	4619      	mov	r1, r3
 8001648:	480c      	ldr	r0, [pc, #48]	; (800167c <MX_ADC1_Init+0x1cc>)
 800164a:	f000 fe51 	bl	80022f0 <HAL_ADC_ConfigChannel>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001654:	f000 f918 	bl	8001888 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800165c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	4619      	mov	r1, r3
 8001662:	4806      	ldr	r0, [pc, #24]	; (800167c <MX_ADC1_Init+0x1cc>)
 8001664:	f000 fe44 	bl	80022f0 <HAL_ADC_ConfigChannel>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_ADC1_Init+0x1c2>
  {
    Error_Handler();
 800166e:	f000 f90b 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	; 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000114 	.word	0x20000114
 8001680:	50040000 	.word	0x50040000
 8001684:	14f00020 	.word	0x14f00020

08001688 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2224      	movs	r2, #36	; 0x24
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f004 f945 	bl	8005924 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <MX_DAC1_Init+0x5c>)
 800169c:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <MX_DAC1_Init+0x60>)
 800169e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016a0:	4810      	ldr	r0, [pc, #64]	; (80016e4 <MX_DAC1_Init+0x5c>)
 80016a2:	f001 fcb0 	bl	8003006 <HAL_DAC_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80016ac:	f000 f8ec 	bl	8001888 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	2200      	movs	r2, #0
 80016c8:	4619      	mov	r1, r3
 80016ca:	4806      	ldr	r0, [pc, #24]	; (80016e4 <MX_DAC1_Init+0x5c>)
 80016cc:	f001 fd0a 	bl	80030e4 <HAL_DAC_ConfigChannel>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80016d6:	f000 f8d7 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	; 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000100 	.word	0x20000100
 80016e8:	40007400 	.word	0x40007400

080016ec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_TIM6_Init+0x64>)
 80016fe:	4a15      	ldr	r2, [pc, #84]	; (8001754 <MX_TIM6_Init+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <MX_TIM6_Init+0x64>)
 8001704:	2200      	movs	r2, #0
 8001706:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_TIM6_Init+0x64>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3199;
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <MX_TIM6_Init+0x64>)
 8001710:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001714:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_TIM6_Init+0x64>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <MX_TIM6_Init+0x64>)
 800171e:	f003 fab9 	bl	8004c94 <HAL_TIM_Base_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001728:	f000 f8ae 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800172c:	2320      	movs	r3, #32
 800172e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_TIM6_Init+0x64>)
 800173a:	f003 fc0d 	bl	8004f58 <HAL_TIMEx_MasterConfigSynchronization>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001744:	f000 f8a0 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	2000017c 	.word	0x2000017c
 8001754:	40001000 	.word	0x40001000

08001758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 800175e:	4a15      	ldr	r2, [pc, #84]	; (80017b4 <MX_USART2_UART_Init+0x5c>)
 8001760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 8001764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 800177e:	220c      	movs	r2, #12
 8001780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 8001790:	2200      	movs	r2, #0
 8001792:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 8001796:	2200      	movs	r2, #0
 8001798:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 800179c:	f003 fc64 	bl	8005068 <HAL_UART_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017a6:	f000 f86f 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200001c8 	.word	0x200001c8
 80017b4:	40004400 	.word	0x40004400

080017b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <MX_GPIO_Init+0xc4>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	4a2a      	ldr	r2, [pc, #168]	; (800187c <MX_GPIO_Init+0xc4>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017da:	4b28      	ldr	r3, [pc, #160]	; (800187c <MX_GPIO_Init+0xc4>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e6:	4b25      	ldr	r3, [pc, #148]	; (800187c <MX_GPIO_Init+0xc4>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	4a24      	ldr	r2, [pc, #144]	; (800187c <MX_GPIO_Init+0xc4>)
 80017ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f2:	4b22      	ldr	r3, [pc, #136]	; (800187c <MX_GPIO_Init+0xc4>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	4b1f      	ldr	r3, [pc, #124]	; (800187c <MX_GPIO_Init+0xc4>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	4a1e      	ldr	r2, [pc, #120]	; (800187c <MX_GPIO_Init+0xc4>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180a:	4b1c      	ldr	r3, [pc, #112]	; (800187c <MX_GPIO_Init+0xc4>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <MX_GPIO_Init+0xc4>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	4a18      	ldr	r2, [pc, #96]	; (800187c <MX_GPIO_Init+0xc4>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <MX_GPIO_Init+0xc4>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	2120      	movs	r1, #32
 8001832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001836:	f001 ff17 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800183a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800183e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_GPIO_Init+0xc8>)
 8001842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	480d      	ldr	r0, [pc, #52]	; (8001884 <MX_GPIO_Init+0xcc>)
 8001850:	f001 fd62 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001854:	2320      	movs	r3, #32
 8001856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001858:	2301      	movs	r3, #1
 800185a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186e:	f001 fd53 	bl	8003318 <HAL_GPIO_Init>

}
 8001872:	bf00      	nop
 8001874:	3728      	adds	r7, #40	; 0x28
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	10210000 	.word	0x10210000
 8001884:	48000800 	.word	0x48000800

08001888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800188c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800188e:	e7fe      	b.n	800188e <Error_Handler+0x6>

08001890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <HAL_MspInit+0x44>)
 8001898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189a:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <HAL_MspInit+0x44>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6613      	str	r3, [r2, #96]	; 0x60
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <HAL_MspInit+0x44>)
 80018a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_MspInit+0x44>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <HAL_MspInit+0x44>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b8:	6593      	str	r3, [r2, #88]	; 0x58
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_MspInit+0x44>)
 80018bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000

080018d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a15      	ldr	r2, [pc, #84]	; (800194c <HAL_ADC_MspInit+0x74>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d124      	bne.n	8001944 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_ADC_MspInit+0x78>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	4a14      	ldr	r2, [pc, #80]	; (8001950 <HAL_ADC_MspInit+0x78>)
 8001900:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_ADC_MspInit+0x78>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <HAL_ADC_MspInit+0x78>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	4a0e      	ldr	r2, [pc, #56]	; (8001950 <HAL_ADC_MspInit+0x78>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <HAL_ADC_MspInit+0x78>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800192a:	2303      	movs	r3, #3
 800192c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800192e:	230b      	movs	r3, #11
 8001930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001940:	f001 fcea 	bl	8003318 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001944:	bf00      	nop
 8001946:	3728      	adds	r7, #40	; 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	50040000 	.word	0x50040000
 8001950:	40021000 	.word	0x40021000

08001954 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a15      	ldr	r2, [pc, #84]	; (80019c8 <HAL_DAC_MspInit+0x74>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d124      	bne.n	80019c0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <HAL_DAC_MspInit+0x78>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	4a14      	ldr	r2, [pc, #80]	; (80019cc <HAL_DAC_MspInit+0x78>)
 800197c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001980:	6593      	str	r3, [r2, #88]	; 0x58
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_DAC_MspInit+0x78>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001986:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <HAL_DAC_MspInit+0x78>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <HAL_DAC_MspInit+0x78>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199a:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <HAL_DAC_MspInit+0x78>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019a6:	2310      	movs	r3, #16
 80019a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019aa:	2303      	movs	r3, #3
 80019ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019bc:	f001 fcac 	bl	8003318 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80019c0:	bf00      	nop
 80019c2:	3728      	adds	r7, #40	; 0x28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40007400 	.word	0x40007400
 80019cc:	40021000 	.word	0x40021000

080019d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <HAL_TIM_Base_MspInit+0x38>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d10b      	bne.n	80019fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_TIM_Base_MspInit+0x3c>)
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e6:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <HAL_TIM_Base_MspInit+0x3c>)
 80019e8:	f043 0310 	orr.w	r3, r3, #16
 80019ec:	6593      	str	r3, [r2, #88]	; 0x58
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <HAL_TIM_Base_MspInit+0x3c>)
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40001000 	.word	0x40001000
 8001a0c:	40021000 	.word	0x40021000

08001a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a17      	ldr	r2, [pc, #92]	; (8001a8c <HAL_UART_MspInit+0x7c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d128      	bne.n	8001a84 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a32:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <HAL_UART_MspInit+0x80>)
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a36:	4a16      	ldr	r2, [pc, #88]	; (8001a90 <HAL_UART_MspInit+0x80>)
 8001a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a3e:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <HAL_UART_MspInit+0x80>)
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <HAL_UART_MspInit+0x80>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	4a10      	ldr	r2, [pc, #64]	; (8001a90 <HAL_UART_MspInit+0x80>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <HAL_UART_MspInit+0x80>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a62:	230c      	movs	r3, #12
 8001a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a72:	2307      	movs	r3, #7
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a80:	f001 fc4a 	bl	8003318 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a84:	bf00      	nop
 8001a86:	3728      	adds	r7, #40	; 0x28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40004400 	.word	0x40004400
 8001a90:	40021000 	.word	0x40021000

08001a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <NMI_Handler+0x4>

08001a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae0:	f000 f8be 	bl	8001c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aec:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <SystemInit+0x64>)
 8001aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af2:	4a16      	ldr	r2, [pc, #88]	; (8001b4c <SystemInit+0x64>)
 8001af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <SystemInit+0x68>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a13      	ldr	r2, [pc, #76]	; (8001b50 <SystemInit+0x68>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <SystemInit+0x68>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <SystemInit+0x68>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a0f      	ldr	r2, [pc, #60]	; (8001b50 <SystemInit+0x68>)
 8001b14:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b18:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b1c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <SystemInit+0x68>)
 8001b20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b24:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <SystemInit+0x68>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <SystemInit+0x68>)
 8001b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <SystemInit+0x68>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <SystemInit+0x64>)
 8001b3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b3e:	609a      	str	r2, [r3, #8]
#endif
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00
 8001b50:	40021000 	.word	0x40021000

08001b54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b58:	f7ff ffc6 	bl	8001ae8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b5e:	e003      	b.n	8001b68 <LoopCopyDataInit>

08001b60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b66:	3104      	adds	r1, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b68:	480a      	ldr	r0, [pc, #40]	; (8001b94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b70:	d3f6      	bcc.n	8001b60 <CopyDataInit>
	ldr	r2, =_sbss
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b74:	e002      	b.n	8001b7c <LoopFillZerobss>

08001b76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b78:	f842 3b04 	str.w	r3, [r2], #4

08001b7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <LoopForever+0x16>)
	cmp	r2, r3
 8001b7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b80:	d3f9      	bcc.n	8001b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b82:	f003 feab 	bl	80058dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b86:	f7ff fbf5 	bl	8001374 <main>

08001b8a <LoopForever>:

LoopForever:
    b LoopForever
 8001b8a:	e7fe      	b.n	8001b8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b8c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001b90:	080059a4 	.word	0x080059a4
	ldr	r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b98:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001b9c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001ba0:	20000250 	.word	0x20000250

08001ba4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC3_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_Init+0x3c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <HAL_Init+0x3c>)
 8001bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bbc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bbe:	2003      	movs	r0, #3
 8001bc0:	f001 f9ee 	bl	8002fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f000 f80f 	bl	8001be8 <HAL_InitTick>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	71fb      	strb	r3, [r7, #7]
 8001bd4:	e001      	b.n	8001bda <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bd6:	f7ff fe5b 	bl	8001890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bda:	79fb      	ldrb	r3, [r7, #7]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40022000 	.word	0x40022000

08001be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bf4:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <HAL_InitTick+0x6c>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d023      	beq.n	8001c44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <HAL_InitTick+0x70>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <HAL_InitTick+0x6c>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f001 f9eb 	bl	8002fee <HAL_SYSTICK_Config>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10f      	bne.n	8001c3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b0f      	cmp	r3, #15
 8001c22:	d809      	bhi.n	8001c38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c24:	2200      	movs	r2, #0
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	f001 f9c3 	bl	8002fb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c30:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <HAL_InitTick+0x74>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e007      	b.n	8001c48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
 8001c3c:	e004      	b.n	8001c48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	73fb      	strb	r3, [r7, #15]
 8001c42:	e001      	b.n	8001c48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000008 	.word	0x20000008
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000004 	.word	0x20000004

08001c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_IncTick+0x20>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_IncTick+0x24>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <HAL_IncTick+0x24>)
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000008 	.word	0x20000008
 8001c84:	2000024c 	.word	0x2000024c

08001c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <HAL_GetTick+0x14>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	2000024c 	.word	0x2000024c

08001ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca8:	f7ff ffee 	bl	8001c88 <HAL_GetTick>
 8001cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb8:	d005      	beq.n	8001cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_Delay+0x40>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cc6:	bf00      	nop
 8001cc8:	f7ff ffde 	bl	8001c88 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d8f7      	bhi.n	8001cc8 <HAL_Delay+0x28>
  {
  }
}
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000008 	.word	0x20000008

08001ce4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	609a      	str	r2, [r3, #8]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3360      	adds	r3, #96	; 0x60
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <LL_ADC_SetOffset+0x44>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d84:	bf00      	nop
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	03fff000 	.word	0x03fff000

08001d94 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3360      	adds	r3, #96	; 0x60
 8001da2:	461a      	mov	r2, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3360      	adds	r3, #96	; 0x60
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	431a      	orrs	r2, r3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001dea:	bf00      	nop
 8001dec:	371c      	adds	r7, #28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b087      	sub	sp, #28
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	3330      	adds	r3, #48	; 0x30
 8001e06:	461a      	mov	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	0a1b      	lsrs	r3, r3, #8
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	4413      	add	r3, r2
 8001e14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	211f      	movs	r1, #31
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	401a      	ands	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	0e9b      	lsrs	r3, r3, #26
 8001e2e:	f003 011f 	and.w	r1, r3, #31
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e42:	bf00      	nop
 8001e44:	371c      	adds	r7, #28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b087      	sub	sp, #28
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3314      	adds	r3, #20
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	0e5b      	lsrs	r3, r3, #25
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	4413      	add	r3, r2
 8001e6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	0d1b      	lsrs	r3, r3, #20
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	2107      	movs	r1, #7
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	401a      	ands	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	0d1b      	lsrs	r3, r3, #20
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	431a      	orrs	r2, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e98:	bf00      	nop
 8001e9a:	371c      	adds	r7, #28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f003 0318 	and.w	r3, r3, #24
 8001ec6:	4908      	ldr	r1, [pc, #32]	; (8001ee8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ec8:	40d9      	lsrs	r1, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	400b      	ands	r3, r1
 8001ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	0007ffff 	.word	0x0007ffff

08001eec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001efc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6093      	str	r3, [r2, #8]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f24:	d101      	bne.n	8001f2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f4c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f74:	d101      	bne.n	8001f7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f9c:	f043 0202 	orr.w	r2, r3, #2
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <LL_ADC_IsEnabled+0x18>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <LL_ADC_IsEnabled+0x1a>
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d101      	bne.n	8001fee <LL_ADC_IsDisableOngoing+0x18>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <LL_ADC_IsDisableOngoing+0x1a>
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b04      	cmp	r3, #4
 800200e:	d101      	bne.n	8002014 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b08      	cmp	r3, #8
 8002034:	d101      	bne.n	800203a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002054:	2300      	movs	r3, #0
 8002056:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e134      	b.n	80022cc <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206c:	2b00      	cmp	r3, #0
 800206e:	d109      	bne.n	8002084 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff fc31 	bl	80018d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff41 	bl	8001f10 <LL_ADC_IsDeepPowerDownEnabled>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d004      	beq.n	800209e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff27 	bl	8001eec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ff5c 	bl	8001f60 <LL_ADC_IsInternalRegulatorEnabled>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d113      	bne.n	80020d6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff ff40 	bl	8001f38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80020b8:	4b86      	ldr	r3, [pc, #536]	; (80022d4 <HAL_ADC_Init+0x28c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	099b      	lsrs	r3, r3, #6
 80020be:	4a86      	ldr	r2, [pc, #536]	; (80022d8 <HAL_ADC_Init+0x290>)
 80020c0:	fba2 2303 	umull	r2, r3, r2, r3
 80020c4:	099b      	lsrs	r3, r3, #6
 80020c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020c8:	e002      	b.n	80020d0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f9      	bne.n	80020ca <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff ff40 	bl	8001f60 <LL_ADC_IsInternalRegulatorEnabled>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10d      	bne.n	8002102 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ea:	f043 0210 	orr.w	r2, r3, #16
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f6:	f043 0201 	orr.w	r2, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ff78 	bl	8001ffc <LL_ADC_REG_IsConversionOngoing>
 800210c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 80cf 	bne.w	80022ba <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b00      	cmp	r3, #0
 8002120:	f040 80cb 	bne.w	80022ba <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002128:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800212c:	f043 0202 	orr.w	r2, r3, #2
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff39 	bl	8001fb0 <LL_ADC_IsEnabled>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d115      	bne.n	8002170 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002144:	4865      	ldr	r0, [pc, #404]	; (80022dc <HAL_ADC_Init+0x294>)
 8002146:	f7ff ff33 	bl	8001fb0 <LL_ADC_IsEnabled>
 800214a:	4604      	mov	r4, r0
 800214c:	4864      	ldr	r0, [pc, #400]	; (80022e0 <HAL_ADC_Init+0x298>)
 800214e:	f7ff ff2f 	bl	8001fb0 <LL_ADC_IsEnabled>
 8002152:	4603      	mov	r3, r0
 8002154:	431c      	orrs	r4, r3
 8002156:	4863      	ldr	r0, [pc, #396]	; (80022e4 <HAL_ADC_Init+0x29c>)
 8002158:	f7ff ff2a 	bl	8001fb0 <LL_ADC_IsEnabled>
 800215c:	4603      	mov	r3, r0
 800215e:	4323      	orrs	r3, r4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d105      	bne.n	8002170 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4619      	mov	r1, r3
 800216a:	485f      	ldr	r0, [pc, #380]	; (80022e8 <HAL_ADC_Init+0x2a0>)
 800216c:	f7ff fdba 	bl	8001ce4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	7e5b      	ldrb	r3, [r3, #25]
 8002174:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800217a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002180:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002186:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800218e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d106      	bne.n	80021ac <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	3b01      	subs	r3, #1
 80021a4:	045b      	lsls	r3, r3, #17
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d009      	beq.n	80021c8 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	4b47      	ldr	r3, [pc, #284]	; (80022ec <HAL_ADC_Init+0x2a4>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	69b9      	ldr	r1, [r7, #24]
 80021d8:	430b      	orrs	r3, r1
 80021da:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff0b 	bl	8001ffc <LL_ADC_REG_IsConversionOngoing>
 80021e6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff18 	bl	8002022 <LL_ADC_INJ_IsConversionOngoing>
 80021f2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d13d      	bne.n	8002276 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d13a      	bne.n	8002276 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002204:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800220c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800221c:	f023 0302 	bic.w	r3, r3, #2
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	69b9      	ldr	r1, [r7, #24]
 8002226:	430b      	orrs	r3, r1
 8002228:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002230:	2b01      	cmp	r3, #1
 8002232:	d118      	bne.n	8002266 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800223e:	f023 0304 	bic.w	r3, r3, #4
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800224a:	4311      	orrs	r1, r2
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002250:	4311      	orrs	r1, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002256:	430a      	orrs	r2, r1
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	611a      	str	r2, [r3, #16]
 8002264:	e007      	b.n	8002276 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0201 	bic.w	r2, r2, #1
 8002274:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d10c      	bne.n	8002298 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	f023 010f 	bic.w	r1, r3, #15
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	1e5a      	subs	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	631a      	str	r2, [r3, #48]	; 0x30
 8002296:	e007      	b.n	80022a8 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 020f 	bic.w	r2, r2, #15
 80022a6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ac:	f023 0303 	bic.w	r3, r3, #3
 80022b0:	f043 0201 	orr.w	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54
 80022b8:	e007      	b.n	80022ca <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022be:	f043 0210 	orr.w	r2, r3, #16
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3724      	adds	r7, #36	; 0x24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd90      	pop	{r4, r7, pc}
 80022d4:	20000000 	.word	0x20000000
 80022d8:	053e2d63 	.word	0x053e2d63
 80022dc:	50040000 	.word	0x50040000
 80022e0:	50040100 	.word	0x50040100
 80022e4:	50040200 	.word	0x50040200
 80022e8:	50040300 	.word	0x50040300
 80022ec:	fff0c007 	.word	0xfff0c007

080022f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b0b6      	sub	sp, #216	; 0xd8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x22>
 800230e:	2302      	movs	r3, #2
 8002310:	e3c6      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x7b0>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fe6c 	bl	8001ffc <LL_ADC_REG_IsConversionOngoing>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 83a7 	bne.w	8002a7a <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b05      	cmp	r3, #5
 8002332:	d824      	bhi.n	800237e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	3b02      	subs	r3, #2
 800233a:	2b03      	cmp	r3, #3
 800233c:	d81b      	bhi.n	8002376 <HAL_ADC_ConfigChannel+0x86>
 800233e:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <HAL_ADC_ConfigChannel+0x54>)
 8002340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002344:	08002355 	.word	0x08002355
 8002348:	0800235d 	.word	0x0800235d
 800234c:	08002365 	.word	0x08002365
 8002350:	0800236d 	.word	0x0800236d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	220c      	movs	r2, #12
 8002358:	605a      	str	r2, [r3, #4]
          break;
 800235a:	e011      	b.n	8002380 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2212      	movs	r2, #18
 8002360:	605a      	str	r2, [r3, #4]
          break;
 8002362:	e00d      	b.n	8002380 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2218      	movs	r2, #24
 8002368:	605a      	str	r2, [r3, #4]
          break;
 800236a:	e009      	b.n	8002380 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002372:	605a      	str	r2, [r3, #4]
          break;
 8002374:	e004      	b.n	8002380 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2206      	movs	r2, #6
 800237a:	605a      	str	r2, [r3, #4]
          break;
 800237c:	e000      	b.n	8002380 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800237e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6859      	ldr	r1, [r3, #4]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	f7ff fd32 	bl	8001df6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fe30 	bl	8001ffc <LL_ADC_REG_IsConversionOngoing>
 800239c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fe3c 	bl	8002022 <LL_ADC_INJ_IsConversionOngoing>
 80023aa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f040 81a6 	bne.w	8002704 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f040 81a1 	bne.w	8002704 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	461a      	mov	r2, r3
 80023d0:	f7ff fd3d 	bl	8001e4e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	695a      	ldr	r2, [r3, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	08db      	lsrs	r3, r3, #3
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d00a      	beq.n	800240c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6919      	ldr	r1, [r3, #16]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002406:	f7ff fca1 	bl	8001d4c <LL_ADC_SetOffset>
 800240a:	e17b      	b.n	8002704 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2100      	movs	r1, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fcbe 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 8002418:	4603      	mov	r3, r0
 800241a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10a      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x148>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2100      	movs	r1, #0
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fcb3 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 800242e:	4603      	mov	r3, r0
 8002430:	0e9b      	lsrs	r3, r3, #26
 8002432:	f003 021f 	and.w	r2, r3, #31
 8002436:	e01e      	b.n	8002476 <HAL_ADC_ConfigChannel+0x186>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2100      	movs	r1, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fca8 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 8002444:	4603      	mov	r3, r0
 8002446:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002456:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800245a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800245e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002466:	2320      	movs	r3, #32
 8002468:	e004      	b.n	8002474 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800246a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247e:	2b00      	cmp	r3, #0
 8002480:	d105      	bne.n	800248e <HAL_ADC_ConfigChannel+0x19e>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	0e9b      	lsrs	r3, r3, #26
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	e018      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x1d0>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80024a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80024aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80024b2:	2320      	movs	r3, #32
 80024b4:	e004      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80024b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d106      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2200      	movs	r2, #0
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fc77 	bl	8001dc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2101      	movs	r1, #1
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fc5b 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 80024de:	4603      	mov	r3, r0
 80024e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10a      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x20e>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2101      	movs	r1, #1
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fc50 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 80024f4:	4603      	mov	r3, r0
 80024f6:	0e9b      	lsrs	r3, r3, #26
 80024f8:	f003 021f 	and.w	r2, r3, #31
 80024fc:	e01e      	b.n	800253c <HAL_ADC_ConfigChannel+0x24c>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2101      	movs	r1, #1
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fc45 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 800250a:	4603      	mov	r3, r0
 800250c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800251c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002520:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002524:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800252c:	2320      	movs	r3, #32
 800252e:	e004      	b.n	800253a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002530:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002534:	fab3 f383 	clz	r3, r3
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002544:	2b00      	cmp	r3, #0
 8002546:	d105      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x264>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	0e9b      	lsrs	r3, r3, #26
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	e018      	b.n	8002586 <HAL_ADC_ConfigChannel+0x296>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002568:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800256c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002570:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002578:	2320      	movs	r3, #32
 800257a:	e004      	b.n	8002586 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800257c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002580:	fab3 f383 	clz	r3, r3
 8002584:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002586:	429a      	cmp	r2, r3
 8002588:	d106      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2200      	movs	r2, #0
 8002590:	2101      	movs	r1, #1
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fc14 	bl	8001dc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2102      	movs	r1, #2
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fbf8 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10a      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x2d4>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2102      	movs	r1, #2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fbed 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 80025ba:	4603      	mov	r3, r0
 80025bc:	0e9b      	lsrs	r3, r3, #26
 80025be:	f003 021f 	and.w	r2, r3, #31
 80025c2:	e01e      	b.n	8002602 <HAL_ADC_ConfigChannel+0x312>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2102      	movs	r1, #2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fbe2 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80025e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80025ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80025f2:	2320      	movs	r3, #32
 80025f4:	e004      	b.n	8002600 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80025f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260a:	2b00      	cmp	r3, #0
 800260c:	d105      	bne.n	800261a <HAL_ADC_ConfigChannel+0x32a>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	0e9b      	lsrs	r3, r3, #26
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	e016      	b.n	8002648 <HAL_ADC_ConfigChannel+0x358>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800262c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800262e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002632:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800263a:	2320      	movs	r3, #32
 800263c:	e004      	b.n	8002648 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800263e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002648:	429a      	cmp	r2, r3
 800264a:	d106      	bne.n	800265a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2200      	movs	r2, #0
 8002652:	2102      	movs	r1, #2
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fbb3 	bl	8001dc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2103      	movs	r1, #3
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fb97 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 8002666:	4603      	mov	r3, r0
 8002668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10a      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x396>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2103      	movs	r1, #3
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fb8c 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 800267c:	4603      	mov	r3, r0
 800267e:	0e9b      	lsrs	r3, r3, #26
 8002680:	f003 021f 	and.w	r2, r3, #31
 8002684:	e017      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x3c6>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2103      	movs	r1, #3
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fb81 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 8002692:	4603      	mov	r3, r0
 8002694:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800269e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026a0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80026a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80026a8:	2320      	movs	r3, #32
 80026aa:	e003      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80026ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d105      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x3de>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	0e9b      	lsrs	r3, r3, #26
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	e011      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x402>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80026dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026de:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80026e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80026e6:	2320      	movs	r3, #32
 80026e8:	e003      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80026ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d106      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2200      	movs	r2, #0
 80026fc:	2103      	movs	r1, #3
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fb5e 	bl	8001dc0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fc51 	bl	8001fb0 <LL_ADC_IsEnabled>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	f040 813f 	bne.w	8002994 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	6819      	ldr	r1, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	461a      	mov	r2, r3
 8002724:	f7ff fbbe 	bl	8001ea4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4a8e      	ldr	r2, [pc, #568]	; (8002968 <HAL_ADC_ConfigChannel+0x678>)
 800272e:	4293      	cmp	r3, r2
 8002730:	f040 8130 	bne.w	8002994 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10b      	bne.n	800275c <HAL_ADC_ConfigChannel+0x46c>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	0e9b      	lsrs	r3, r3, #26
 800274a:	3301      	adds	r3, #1
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	2b09      	cmp	r3, #9
 8002752:	bf94      	ite	ls
 8002754:	2301      	movls	r3, #1
 8002756:	2300      	movhi	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	e019      	b.n	8002790 <HAL_ADC_ConfigChannel+0x4a0>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800276a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800276c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800276e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002774:	2320      	movs	r3, #32
 8002776:	e003      	b.n	8002780 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002778:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	3301      	adds	r3, #1
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	2b09      	cmp	r3, #9
 8002788:	bf94      	ite	ls
 800278a:	2301      	movls	r3, #1
 800278c:	2300      	movhi	r3, #0
 800278e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002790:	2b00      	cmp	r3, #0
 8002792:	d079      	beq.n	8002888 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279c:	2b00      	cmp	r3, #0
 800279e:	d107      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x4c0>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	0e9b      	lsrs	r3, r3, #26
 80027a6:	3301      	adds	r3, #1
 80027a8:	069b      	lsls	r3, r3, #26
 80027aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027ae:	e015      	b.n	80027dc <HAL_ADC_ConfigChannel+0x4ec>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027b8:	fa93 f3a3 	rbit	r3, r3
 80027bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80027c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80027c8:	2320      	movs	r3, #32
 80027ca:	e003      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80027cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	3301      	adds	r3, #1
 80027d6:	069b      	lsls	r3, r3, #26
 80027d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d109      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x50c>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	0e9b      	lsrs	r3, r3, #26
 80027ee:	3301      	adds	r3, #1
 80027f0:	f003 031f 	and.w	r3, r3, #31
 80027f4:	2101      	movs	r1, #1
 80027f6:	fa01 f303 	lsl.w	r3, r1, r3
 80027fa:	e017      	b.n	800282c <HAL_ADC_ConfigChannel+0x53c>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800280a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800280c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800280e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002814:	2320      	movs	r3, #32
 8002816:	e003      	b.n	8002820 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	3301      	adds	r3, #1
 8002822:	f003 031f 	and.w	r3, r3, #31
 8002826:	2101      	movs	r1, #1
 8002828:	fa01 f303 	lsl.w	r3, r1, r3
 800282c:	ea42 0103 	orr.w	r1, r2, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x562>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	0e9b      	lsrs	r3, r3, #26
 8002842:	3301      	adds	r3, #1
 8002844:	f003 021f 	and.w	r2, r3, #31
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	051b      	lsls	r3, r3, #20
 8002850:	e018      	b.n	8002884 <HAL_ADC_ConfigChannel+0x594>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002862:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800286a:	2320      	movs	r3, #32
 800286c:	e003      	b.n	8002876 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800286e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002870:	fab3 f383 	clz	r3, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	3301      	adds	r3, #1
 8002878:	f003 021f 	and.w	r2, r3, #31
 800287c:	4613      	mov	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4413      	add	r3, r2
 8002882:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002884:	430b      	orrs	r3, r1
 8002886:	e080      	b.n	800298a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002890:	2b00      	cmp	r3, #0
 8002892:	d107      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x5b4>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	0e9b      	lsrs	r3, r3, #26
 800289a:	3301      	adds	r3, #1
 800289c:	069b      	lsls	r3, r3, #26
 800289e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028a2:	e015      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x5e0>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ac:	fa93 f3a3 	rbit	r3, r3
 80028b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80028b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80028bc:	2320      	movs	r3, #32
 80028be:	e003      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	3301      	adds	r3, #1
 80028ca:	069b      	lsls	r3, r3, #26
 80028cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d109      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x600>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	0e9b      	lsrs	r3, r3, #26
 80028e2:	3301      	adds	r3, #1
 80028e4:	f003 031f 	and.w	r3, r3, #31
 80028e8:	2101      	movs	r1, #1
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	e017      	b.n	8002920 <HAL_ADC_ConfigChannel+0x630>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	61fb      	str	r3, [r7, #28]
  return result;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002908:	2320      	movs	r3, #32
 800290a:	e003      	b.n	8002914 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	3301      	adds	r3, #1
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	2101      	movs	r1, #1
 800291c:	fa01 f303 	lsl.w	r3, r1, r3
 8002920:	ea42 0103 	orr.w	r1, r2, r3
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10d      	bne.n	800294c <HAL_ADC_ConfigChannel+0x65c>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	0e9b      	lsrs	r3, r3, #26
 8002936:	3301      	adds	r3, #1
 8002938:	f003 021f 	and.w	r2, r3, #31
 800293c:	4613      	mov	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4413      	add	r3, r2
 8002942:	3b1e      	subs	r3, #30
 8002944:	051b      	lsls	r3, r3, #20
 8002946:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800294a:	e01d      	b.n	8002988 <HAL_ADC_ConfigChannel+0x698>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	613b      	str	r3, [r7, #16]
  return result;
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d103      	bne.n	800296c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002964:	2320      	movs	r3, #32
 8002966:	e005      	b.n	8002974 <HAL_ADC_ConfigChannel+0x684>
 8002968:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	3301      	adds	r3, #1
 8002976:	f003 021f 	and.w	r2, r3, #31
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	3b1e      	subs	r3, #30
 8002982:	051b      	lsls	r3, r3, #20
 8002984:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002988:	430b      	orrs	r3, r1
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	6892      	ldr	r2, [r2, #8]
 800298e:	4619      	mov	r1, r3
 8002990:	f7ff fa5d 	bl	8001e4e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b43      	ldr	r3, [pc, #268]	; (8002aa8 <HAL_ADC_ConfigChannel+0x7b8>)
 800299a:	4013      	ands	r3, r2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d079      	beq.n	8002a94 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029a0:	4842      	ldr	r0, [pc, #264]	; (8002aac <HAL_ADC_ConfigChannel+0x7bc>)
 80029a2:	f7ff f9c5 	bl	8001d30 <LL_ADC_GetCommonPathInternalCh>
 80029a6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a40      	ldr	r2, [pc, #256]	; (8002ab0 <HAL_ADC_ConfigChannel+0x7c0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d12b      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d125      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a3b      	ldr	r2, [pc, #236]	; (8002ab4 <HAL_ADC_ConfigChannel+0x7c4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d004      	beq.n	80029d4 <HAL_ADC_ConfigChannel+0x6e4>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a3a      	ldr	r2, [pc, #232]	; (8002ab8 <HAL_ADC_ConfigChannel+0x7c8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d15c      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029dc:	4619      	mov	r1, r3
 80029de:	4833      	ldr	r0, [pc, #204]	; (8002aac <HAL_ADC_ConfigChannel+0x7bc>)
 80029e0:	f7ff f993 	bl	8001d0a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80029e4:	4b35      	ldr	r3, [pc, #212]	; (8002abc <HAL_ADC_ConfigChannel+0x7cc>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	099b      	lsrs	r3, r3, #6
 80029ea:	4a35      	ldr	r2, [pc, #212]	; (8002ac0 <HAL_ADC_ConfigChannel+0x7d0>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	099a      	lsrs	r2, r3, #6
 80029f2:	4613      	mov	r3, r2
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029fc:	e002      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f9      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a0a:	e040      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a2c      	ldr	r2, [pc, #176]	; (8002ac4 <HAL_ADC_ConfigChannel+0x7d4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d118      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x758>
 8002a16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d112      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a23      	ldr	r2, [pc, #140]	; (8002ab4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d004      	beq.n	8002a36 <HAL_ADC_ConfigChannel+0x746>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d12d      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a3e:	4619      	mov	r1, r3
 8002a40:	481a      	ldr	r0, [pc, #104]	; (8002aac <HAL_ADC_ConfigChannel+0x7bc>)
 8002a42:	f7ff f962 	bl	8001d0a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a46:	e024      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a1e      	ldr	r2, [pc, #120]	; (8002ac8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d120      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d11a      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a14      	ldr	r2, [pc, #80]	; (8002ab4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d115      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a70:	4619      	mov	r1, r3
 8002a72:	480e      	ldr	r0, [pc, #56]	; (8002aac <HAL_ADC_ConfigChannel+0x7bc>)
 8002a74:	f7ff f949 	bl	8001d0a <LL_ADC_SetCommonPathInternalCh>
 8002a78:	e00c      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7e:	f043 0220 	orr.w	r2, r3, #32
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002a8c:	e002      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a8e:	bf00      	nop
 8002a90:	e000      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a92:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a9c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	37d8      	adds	r7, #216	; 0xd8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	80080000 	.word	0x80080000
 8002aac:	50040300 	.word	0x50040300
 8002ab0:	c7520000 	.word	0xc7520000
 8002ab4:	50040000 	.word	0x50040000
 8002ab8:	50040200 	.word	0x50040200
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	053e2d63 	.word	0x053e2d63
 8002ac4:	cb840000 	.word	0xcb840000
 8002ac8:	80000001 	.word	0x80000001

08002acc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fa7c 	bl	8001fd6 <LL_ADC_IsDisableOngoing>
 8002ade:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fa63 	bl	8001fb0 <LL_ADC_IsEnabled>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d040      	beq.n	8002b72 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d13d      	bne.n	8002b72 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 030d 	and.w	r3, r3, #13
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d10c      	bne.n	8002b1e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fa3d 	bl	8001f88 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2203      	movs	r2, #3
 8002b14:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b16:	f7ff f8b7 	bl	8001c88 <HAL_GetTick>
 8002b1a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b1c:	e022      	b.n	8002b64 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b22:	f043 0210 	orr.w	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2e:	f043 0201 	orr.w	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e01c      	b.n	8002b74 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b3a:	f7ff f8a5 	bl	8001c88 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d90d      	bls.n	8002b64 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4c:	f043 0210 	orr.w	r2, r3, #16
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b58:	f043 0201 	orr.w	r2, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e007      	b.n	8002b74 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1e3      	bne.n	8002b3a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <LL_ADC_IsEnabled>:
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <LL_ADC_IsEnabled+0x18>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <LL_ADC_IsEnabled+0x1a>
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <LL_ADC_StartCalibration>:
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002bb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_ADC_IsCalibrationOnGoing>:
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002be8:	d101      	bne.n	8002bee <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <LL_ADC_REG_IsConversionOngoing>:
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d101      	bne.n	8002c14 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_ADCEx_Calibration_Start+0x1c>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e04d      	b.n	8002cda <HAL_ADCEx_Calibration_Start+0xb8>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff ff40 	bl	8002acc <ADC_Disable>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d136      	bne.n	8002cc4 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c5e:	f023 0302 	bic.w	r3, r3, #2
 8002c62:	f043 0202 	orr.w	r2, r3, #2
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6839      	ldr	r1, [r7, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ff96 	bl	8002ba2 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c76:	e014      	b.n	8002ca2 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002c84:	d30d      	bcc.n	8002ca2 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	f023 0312 	bic.w	r3, r3, #18
 8002c8e:	f043 0210 	orr.w	r2, r3, #16
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e01b      	b.n	8002cda <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff ff94 	bl	8002bd4 <LL_ADC_IsCalibrationOnGoing>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1e2      	bne.n	8002c78 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb6:	f023 0303 	bic.w	r3, r3, #3
 8002cba:	f043 0201 	orr.w	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	655a      	str	r2, [r3, #84]	; 0x54
 8002cc2:	e005      	b.n	8002cd0 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc8:	f043 0210 	orr.w	r2, r3, #16
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b09f      	sub	sp, #124	; 0x7c
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e08f      	b.n	8002e22 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a47      	ldr	r2, [pc, #284]	; (8002e2c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d102      	bne.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002d14:	4b46      	ldr	r3, [pc, #280]	; (8002e30 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	e001      	b.n	8002d1e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10b      	bne.n	8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d28:	f043 0220 	orr.w	r2, r3, #32
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e072      	b.n	8002e22 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff ff5c 	bl	8002bfc <LL_ADC_REG_IsConversionOngoing>
 8002d44:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff ff56 	bl	8002bfc <LL_ADC_REG_IsConversionOngoing>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d154      	bne.n	8002e00 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002d56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d151      	bne.n	8002e00 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d5c:	4b35      	ldr	r3, [pc, #212]	; (8002e34 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d5e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d02c      	beq.n	8002dc2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	6859      	ldr	r1, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d7a:	035b      	lsls	r3, r3, #13
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d82:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d84:	4829      	ldr	r0, [pc, #164]	; (8002e2c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002d86:	f7ff fef9 	bl	8002b7c <LL_ADC_IsEnabled>
 8002d8a:	4604      	mov	r4, r0
 8002d8c:	4828      	ldr	r0, [pc, #160]	; (8002e30 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002d8e:	f7ff fef5 	bl	8002b7c <LL_ADC_IsEnabled>
 8002d92:	4603      	mov	r3, r0
 8002d94:	431c      	orrs	r4, r3
 8002d96:	4828      	ldr	r0, [pc, #160]	; (8002e38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d98:	f7ff fef0 	bl	8002b7c <LL_ADC_IsEnabled>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4323      	orrs	r3, r4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d137      	bne.n	8002e14 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002dac:	f023 030f 	bic.w	r3, r3, #15
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	6811      	ldr	r1, [r2, #0]
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	6892      	ldr	r2, [r2, #8]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dbe:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dc0:	e028      	b.n	8002e14 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dcc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dce:	4817      	ldr	r0, [pc, #92]	; (8002e2c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002dd0:	f7ff fed4 	bl	8002b7c <LL_ADC_IsEnabled>
 8002dd4:	4604      	mov	r4, r0
 8002dd6:	4816      	ldr	r0, [pc, #88]	; (8002e30 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002dd8:	f7ff fed0 	bl	8002b7c <LL_ADC_IsEnabled>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	431c      	orrs	r4, r3
 8002de0:	4815      	ldr	r0, [pc, #84]	; (8002e38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002de2:	f7ff fecb 	bl	8002b7c <LL_ADC_IsEnabled>
 8002de6:	4603      	mov	r3, r0
 8002de8:	4323      	orrs	r3, r4
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d112      	bne.n	8002e14 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002df6:	f023 030f 	bic.w	r3, r3, #15
 8002dfa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002dfc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dfe:	e009      	b.n	8002e14 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e04:	f043 0220 	orr.w	r2, r3, #32
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002e12:	e000      	b.n	8002e16 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e1e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	377c      	adds	r7, #124	; 0x7c
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd90      	pop	{r4, r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	50040000 	.word	0x50040000
 8002e30:	50040100 	.word	0x50040100
 8002e34:	50040300 	.word	0x50040300
 8002e38:	50040200 	.word	0x50040200

08002e3c <__NVIC_SetPriorityGrouping>:
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <__NVIC_SetPriorityGrouping+0x44>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e58:	4013      	ands	r3, r2
 8002e5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e6e:	4a04      	ldr	r2, [pc, #16]	; (8002e80 <__NVIC_SetPriorityGrouping+0x44>)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	60d3      	str	r3, [r2, #12]
}
 8002e74:	bf00      	nop
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <__NVIC_GetPriorityGrouping>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e88:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <__NVIC_GetPriorityGrouping+0x18>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	0a1b      	lsrs	r3, r3, #8
 8002e8e:	f003 0307 	and.w	r3, r3, #7
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <__NVIC_SetPriority>:
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	6039      	str	r1, [r7, #0]
 8002eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	db0a      	blt.n	8002eca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	490c      	ldr	r1, [pc, #48]	; (8002eec <__NVIC_SetPriority+0x4c>)
 8002eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebe:	0112      	lsls	r2, r2, #4
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ec8:	e00a      	b.n	8002ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	4908      	ldr	r1, [pc, #32]	; (8002ef0 <__NVIC_SetPriority+0x50>)
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	3b04      	subs	r3, #4
 8002ed8:	0112      	lsls	r2, r2, #4
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	440b      	add	r3, r1
 8002ede:	761a      	strb	r2, [r3, #24]
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000e100 	.word	0xe000e100
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b089      	sub	sp, #36	; 0x24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f1c3 0307 	rsb	r3, r3, #7
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	bf28      	it	cs
 8002f12:	2304      	movcs	r3, #4
 8002f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	2b06      	cmp	r3, #6
 8002f1c:	d902      	bls.n	8002f24 <NVIC_EncodePriority+0x30>
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3b03      	subs	r3, #3
 8002f22:	e000      	b.n	8002f26 <NVIC_EncodePriority+0x32>
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f28:	f04f 32ff 	mov.w	r2, #4294967295
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43da      	mvns	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	401a      	ands	r2, r3
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	fa01 f303 	lsl.w	r3, r1, r3
 8002f46:	43d9      	mvns	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f4c:	4313      	orrs	r3, r2
         );
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3724      	adds	r7, #36	; 0x24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f6c:	d301      	bcc.n	8002f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e00f      	b.n	8002f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f72:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <SysTick_Config+0x40>)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f7a:	210f      	movs	r1, #15
 8002f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f80:	f7ff ff8e 	bl	8002ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <SysTick_Config+0x40>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f8a:	4b04      	ldr	r3, [pc, #16]	; (8002f9c <SysTick_Config+0x40>)
 8002f8c:	2207      	movs	r2, #7
 8002f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	e000e010 	.word	0xe000e010

08002fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff ff47 	bl	8002e3c <__NVIC_SetPriorityGrouping>
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b086      	sub	sp, #24
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	607a      	str	r2, [r7, #4]
 8002fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fc8:	f7ff ff5c 	bl	8002e84 <__NVIC_GetPriorityGrouping>
 8002fcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	6978      	ldr	r0, [r7, #20]
 8002fd4:	f7ff ff8e 	bl	8002ef4 <NVIC_EncodePriority>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff ff5d 	bl	8002ea0 <__NVIC_SetPriority>
}
 8002fe6:	bf00      	nop
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff ffb0 	bl	8002f5c <SysTick_Config>
 8002ffc:	4603      	mov	r3, r0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e014      	b.n	8003042 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	791b      	ldrb	r3, [r3, #4]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d105      	bne.n	800302e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7fe fc93 	bl	8001954 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2202      	movs	r2, #2
 8003032:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	795b      	ldrb	r3, [r3, #5]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_DAC_Start+0x16>
 800305c:	2302      	movs	r3, #2
 800305e:	e03b      	b.n	80030d8 <HAL_DAC_Start+0x8e>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2202      	movs	r2, #2
 800306a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6819      	ldr	r1, [r3, #0]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2201      	movs	r2, #1
 800307a:	409a      	lsls	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10f      	bne.n	80030aa <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003094:	2b04      	cmp	r3, #4
 8003096:	d118      	bne.n	80030ca <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	e00f      	b.n	80030ca <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80030b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030b8:	d107      	bne.n	80030ca <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0202 	orr.w	r2, r2, #2
 80030c8:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	795b      	ldrb	r3, [r3, #5]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_DAC_ConfigChannel+0x1c>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e107      	b.n	8003310 <HAL_DAC_ConfigChannel+0x22c>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2201      	movs	r2, #1
 8003104:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2202      	movs	r2, #2
 800310a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b04      	cmp	r3, #4
 8003112:	d174      	bne.n	80031fe <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003114:	f7fe fdb8 	bl	8001c88 <HAL_GetTick>
 8003118:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d134      	bne.n	800318a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003120:	e011      	b.n	8003146 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003122:	f7fe fdb1 	bl	8001c88 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d90a      	bls.n	8003146 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f043 0208 	orr.w	r2, r3, #8
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2203      	movs	r2, #3
 8003140:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e0e4      	b.n	8003310 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e6      	bne.n	8003122 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003154:	2001      	movs	r0, #1
 8003156:	f7fe fda3 	bl	8001ca0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	6992      	ldr	r2, [r2, #24]
 8003162:	641a      	str	r2, [r3, #64]	; 0x40
 8003164:	e01e      	b.n	80031a4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003166:	f7fe fd8f 	bl	8001c88 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b01      	cmp	r3, #1
 8003172:	d90a      	bls.n	800318a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	f043 0208 	orr.w	r2, r3, #8
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2203      	movs	r2, #3
 8003184:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e0c2      	b.n	8003310 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003190:	2b00      	cmp	r3, #0
 8003192:	dbe8      	blt.n	8003166 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003194:	2001      	movs	r0, #1
 8003196:	f7fe fd83 	bl	8001ca0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	6992      	ldr	r2, [r2, #24]
 80031a2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80031b4:	fa01 f303 	lsl.w	r3, r1, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	ea02 0103 	and.w	r1, r2, r3
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	69da      	ldr	r2, [r3, #28]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	409a      	lsls	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f003 0310 	and.w	r3, r3, #16
 80031de:	21ff      	movs	r1, #255	; 0xff
 80031e0:	fa01 f303 	lsl.w	r3, r1, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	ea02 0103 	and.w	r1, r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	6a1a      	ldr	r2, [r3, #32]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	409a      	lsls	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d11d      	bne.n	8003242 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	221f      	movs	r2, #31
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4013      	ands	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003248:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	2207      	movs	r2, #7
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	431a      	orrs	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6819      	ldr	r1, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43da      	mvns	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	400a      	ands	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f003 0310 	and.w	r3, r3, #16
 80032b6:	f640 72fc 	movw	r2, #4092	; 0xffc
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4013      	ands	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6819      	ldr	r1, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	22c0      	movs	r2, #192	; 0xc0
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43da      	mvns	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	400a      	ands	r2, r1
 8003300:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3720      	adds	r7, #32
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003318:	b480      	push	{r7}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003326:	e17f      	b.n	8003628 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	2101      	movs	r1, #1
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	fa01 f303 	lsl.w	r3, r1, r3
 8003334:	4013      	ands	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 8171 	beq.w	8003622 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d00b      	beq.n	8003360 <HAL_GPIO_Init+0x48>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d007      	beq.n	8003360 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003354:	2b11      	cmp	r3, #17
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b12      	cmp	r3, #18
 800335e:	d130      	bne.n	80033c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	2203      	movs	r2, #3
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4013      	ands	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003396:	2201      	movs	r2, #1
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4013      	ands	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	f003 0201 	and.w	r2, r3, #1
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d118      	bne.n	8003400 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80033d4:	2201      	movs	r2, #1
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4013      	ands	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	08db      	lsrs	r3, r3, #3
 80033ea:	f003 0201 	and.w	r2, r3, #1
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	2203      	movs	r2, #3
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d003      	beq.n	8003440 <HAL_GPIO_Init+0x128>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b12      	cmp	r3, #18
 800343e:	d123      	bne.n	8003488 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	08da      	lsrs	r2, r3, #3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3208      	adds	r2, #8
 8003448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800344c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	220f      	movs	r2, #15
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4013      	ands	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	08da      	lsrs	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3208      	adds	r2, #8
 8003482:	6939      	ldr	r1, [r7, #16]
 8003484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	2203      	movs	r2, #3
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4013      	ands	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 0203 	and.w	r2, r3, #3
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 80ac 	beq.w	8003622 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ca:	4b5e      	ldr	r3, [pc, #376]	; (8003644 <HAL_GPIO_Init+0x32c>)
 80034cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ce:	4a5d      	ldr	r2, [pc, #372]	; (8003644 <HAL_GPIO_Init+0x32c>)
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	6613      	str	r3, [r2, #96]	; 0x60
 80034d6:	4b5b      	ldr	r3, [pc, #364]	; (8003644 <HAL_GPIO_Init+0x32c>)
 80034d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034e2:	4a59      	ldr	r2, [pc, #356]	; (8003648 <HAL_GPIO_Init+0x330>)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	089b      	lsrs	r3, r3, #2
 80034e8:	3302      	adds	r3, #2
 80034ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	220f      	movs	r2, #15
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43db      	mvns	r3, r3
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4013      	ands	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800350c:	d025      	beq.n	800355a <HAL_GPIO_Init+0x242>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a4e      	ldr	r2, [pc, #312]	; (800364c <HAL_GPIO_Init+0x334>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01f      	beq.n	8003556 <HAL_GPIO_Init+0x23e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a4d      	ldr	r2, [pc, #308]	; (8003650 <HAL_GPIO_Init+0x338>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d019      	beq.n	8003552 <HAL_GPIO_Init+0x23a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a4c      	ldr	r2, [pc, #304]	; (8003654 <HAL_GPIO_Init+0x33c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <HAL_GPIO_Init+0x236>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a4b      	ldr	r2, [pc, #300]	; (8003658 <HAL_GPIO_Init+0x340>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00d      	beq.n	800354a <HAL_GPIO_Init+0x232>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a4a      	ldr	r2, [pc, #296]	; (800365c <HAL_GPIO_Init+0x344>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d007      	beq.n	8003546 <HAL_GPIO_Init+0x22e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a49      	ldr	r2, [pc, #292]	; (8003660 <HAL_GPIO_Init+0x348>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d101      	bne.n	8003542 <HAL_GPIO_Init+0x22a>
 800353e:	2306      	movs	r3, #6
 8003540:	e00c      	b.n	800355c <HAL_GPIO_Init+0x244>
 8003542:	2307      	movs	r3, #7
 8003544:	e00a      	b.n	800355c <HAL_GPIO_Init+0x244>
 8003546:	2305      	movs	r3, #5
 8003548:	e008      	b.n	800355c <HAL_GPIO_Init+0x244>
 800354a:	2304      	movs	r3, #4
 800354c:	e006      	b.n	800355c <HAL_GPIO_Init+0x244>
 800354e:	2303      	movs	r3, #3
 8003550:	e004      	b.n	800355c <HAL_GPIO_Init+0x244>
 8003552:	2302      	movs	r3, #2
 8003554:	e002      	b.n	800355c <HAL_GPIO_Init+0x244>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <HAL_GPIO_Init+0x244>
 800355a:	2300      	movs	r3, #0
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	f002 0203 	and.w	r2, r2, #3
 8003562:	0092      	lsls	r2, r2, #2
 8003564:	4093      	lsls	r3, r2
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800356c:	4936      	ldr	r1, [pc, #216]	; (8003648 <HAL_GPIO_Init+0x330>)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	089b      	lsrs	r3, r3, #2
 8003572:	3302      	adds	r3, #2
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800357a:	4b3a      	ldr	r3, [pc, #232]	; (8003664 <HAL_GPIO_Init+0x34c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	43db      	mvns	r3, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800359e:	4a31      	ldr	r2, [pc, #196]	; (8003664 <HAL_GPIO_Init+0x34c>)
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80035a4:	4b2f      	ldr	r3, [pc, #188]	; (8003664 <HAL_GPIO_Init+0x34c>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4013      	ands	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035c8:	4a26      	ldr	r2, [pc, #152]	; (8003664 <HAL_GPIO_Init+0x34c>)
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035ce:	4b25      	ldr	r3, [pc, #148]	; (8003664 <HAL_GPIO_Init+0x34c>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	43db      	mvns	r3, r3
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4013      	ands	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035f2:	4a1c      	ldr	r2, [pc, #112]	; (8003664 <HAL_GPIO_Init+0x34c>)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035f8:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <HAL_GPIO_Init+0x34c>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	43db      	mvns	r3, r3
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4013      	ands	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800361c:	4a11      	ldr	r2, [pc, #68]	; (8003664 <HAL_GPIO_Init+0x34c>)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	3301      	adds	r3, #1
 8003626:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	fa22 f303 	lsr.w	r3, r2, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	f47f ae78 	bne.w	8003328 <HAL_GPIO_Init+0x10>
  }
}
 8003638:	bf00      	nop
 800363a:	371c      	adds	r7, #28
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	40021000 	.word	0x40021000
 8003648:	40010000 	.word	0x40010000
 800364c:	48000400 	.word	0x48000400
 8003650:	48000800 	.word	0x48000800
 8003654:	48000c00 	.word	0x48000c00
 8003658:	48001000 	.word	0x48001000
 800365c:	48001400 	.word	0x48001400
 8003660:	48001800 	.word	0x48001800
 8003664:	40010400 	.word	0x40010400

08003668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	807b      	strh	r3, [r7, #2]
 8003674:	4613      	mov	r3, r2
 8003676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003678:	787b      	ldrb	r3, [r7, #1]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800367e:	887a      	ldrh	r2, [r7, #2]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003684:	e002      	b.n	800368c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003686:	887a      	ldrh	r2, [r7, #2]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800369c:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40007000 	.word	0x40007000

080036b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c2:	d130      	bne.n	8003726 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036c4:	4b23      	ldr	r3, [pc, #140]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d0:	d038      	beq.n	8003744 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036d2:	4b20      	ldr	r3, [pc, #128]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036da:	4a1e      	ldr	r2, [pc, #120]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036e2:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2232      	movs	r2, #50	; 0x32
 80036e8:	fb02 f303 	mul.w	r3, r2, r3
 80036ec:	4a1b      	ldr	r2, [pc, #108]	; (800375c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	0c9b      	lsrs	r3, r3, #18
 80036f4:	3301      	adds	r3, #1
 80036f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036f8:	e002      	b.n	8003700 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003700:	4b14      	ldr	r3, [pc, #80]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800370c:	d102      	bne.n	8003714 <HAL_PWREx_ControlVoltageScaling+0x60>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1f2      	bne.n	80036fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003714:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003720:	d110      	bne.n	8003744 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e00f      	b.n	8003746 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003726:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800372e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003732:	d007      	beq.n	8003744 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003734:	4b07      	ldr	r3, [pc, #28]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800373c:	4a05      	ldr	r2, [pc, #20]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800373e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003742:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40007000 	.word	0x40007000
 8003758:	20000000 	.word	0x20000000
 800375c:	431bde83 	.word	0x431bde83

08003760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e3d4      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003772:	4ba1      	ldr	r3, [pc, #644]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800377c:	4b9e      	ldr	r3, [pc, #632]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0310 	and.w	r3, r3, #16
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 80e4 	beq.w	800395c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d007      	beq.n	80037aa <HAL_RCC_OscConfig+0x4a>
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b0c      	cmp	r3, #12
 800379e:	f040 808b 	bne.w	80038b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	f040 8087 	bne.w	80038b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037aa:	4b93      	ldr	r3, [pc, #588]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <HAL_RCC_OscConfig+0x62>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e3ac      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1a      	ldr	r2, [r3, #32]
 80037c6:	4b8c      	ldr	r3, [pc, #560]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d004      	beq.n	80037dc <HAL_RCC_OscConfig+0x7c>
 80037d2:	4b89      	ldr	r3, [pc, #548]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037da:	e005      	b.n	80037e8 <HAL_RCC_OscConfig+0x88>
 80037dc:	4b86      	ldr	r3, [pc, #536]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80037de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e2:	091b      	lsrs	r3, r3, #4
 80037e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d223      	bcs.n	8003834 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fd3f 	bl	8004274 <RCC_SetFlashLatencyFromMSIRange>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e38d      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003800:	4b7d      	ldr	r3, [pc, #500]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a7c      	ldr	r2, [pc, #496]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003806:	f043 0308 	orr.w	r3, r3, #8
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b7a      	ldr	r3, [pc, #488]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	4977      	ldr	r1, [pc, #476]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800381e:	4b76      	ldr	r3, [pc, #472]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	021b      	lsls	r3, r3, #8
 800382c:	4972      	ldr	r1, [pc, #456]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800382e:	4313      	orrs	r3, r2
 8003830:	604b      	str	r3, [r1, #4]
 8003832:	e025      	b.n	8003880 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003834:	4b70      	ldr	r3, [pc, #448]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a6f      	ldr	r2, [pc, #444]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800383a:	f043 0308 	orr.w	r3, r3, #8
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	4b6d      	ldr	r3, [pc, #436]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	496a      	ldr	r1, [pc, #424]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003852:	4b69      	ldr	r3, [pc, #420]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	4965      	ldr	r1, [pc, #404]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d109      	bne.n	8003880 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fcff 	bl	8004274 <RCC_SetFlashLatencyFromMSIRange>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e34d      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003880:	f000 fc36 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 8003884:	4601      	mov	r1, r0
 8003886:	4b5c      	ldr	r3, [pc, #368]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	091b      	lsrs	r3, r3, #4
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	4a5a      	ldr	r2, [pc, #360]	; (80039fc <HAL_RCC_OscConfig+0x29c>)
 8003892:	5cd3      	ldrb	r3, [r2, r3]
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	fa21 f303 	lsr.w	r3, r1, r3
 800389c:	4a58      	ldr	r2, [pc, #352]	; (8003a00 <HAL_RCC_OscConfig+0x2a0>)
 800389e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038a0:	4b58      	ldr	r3, [pc, #352]	; (8003a04 <HAL_RCC_OscConfig+0x2a4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fe f99f 	bl	8001be8 <HAL_InitTick>
 80038aa:	4603      	mov	r3, r0
 80038ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d052      	beq.n	800395a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	e331      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d032      	beq.n	8003926 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038c0:	4b4d      	ldr	r3, [pc, #308]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a4c      	ldr	r2, [pc, #304]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038cc:	f7fe f9dc 	bl	8001c88 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038d4:	f7fe f9d8 	bl	8001c88 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e31a      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038e6:	4b44      	ldr	r3, [pc, #272]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038f2:	4b41      	ldr	r3, [pc, #260]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a40      	ldr	r2, [pc, #256]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80038f8:	f043 0308 	orr.w	r3, r3, #8
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	4b3e      	ldr	r3, [pc, #248]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	493b      	ldr	r1, [pc, #236]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800390c:	4313      	orrs	r3, r2
 800390e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003910:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	4936      	ldr	r1, [pc, #216]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]
 8003924:	e01a      	b.n	800395c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003926:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a33      	ldr	r2, [pc, #204]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800392c:	f023 0301 	bic.w	r3, r3, #1
 8003930:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003932:	f7fe f9a9 	bl	8001c88 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800393a:	f7fe f9a5 	bl	8001c88 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e2e7      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800394c:	4b2a      	ldr	r3, [pc, #168]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f0      	bne.n	800393a <HAL_RCC_OscConfig+0x1da>
 8003958:	e000      	b.n	800395c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800395a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	d074      	beq.n	8003a52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2b08      	cmp	r3, #8
 800396c:	d005      	beq.n	800397a <HAL_RCC_OscConfig+0x21a>
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b0c      	cmp	r3, #12
 8003972:	d10e      	bne.n	8003992 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2b03      	cmp	r3, #3
 8003978:	d10b      	bne.n	8003992 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800397a:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d064      	beq.n	8003a50 <HAL_RCC_OscConfig+0x2f0>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d160      	bne.n	8003a50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e2c4      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399a:	d106      	bne.n	80039aa <HAL_RCC_OscConfig+0x24a>
 800399c:	4b16      	ldr	r3, [pc, #88]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a15      	ldr	r2, [pc, #84]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80039a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	e01d      	b.n	80039e6 <HAL_RCC_OscConfig+0x286>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039b2:	d10c      	bne.n	80039ce <HAL_RCC_OscConfig+0x26e>
 80039b4:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a0f      	ldr	r2, [pc, #60]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80039ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a0c      	ldr	r2, [pc, #48]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80039c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	e00b      	b.n	80039e6 <HAL_RCC_OscConfig+0x286>
 80039ce:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a09      	ldr	r2, [pc, #36]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80039d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a06      	ldr	r2, [pc, #24]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80039e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d01c      	beq.n	8003a28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ee:	f7fe f94b 	bl	8001c88 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039f4:	e011      	b.n	8003a1a <HAL_RCC_OscConfig+0x2ba>
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
 80039fc:	0800594c 	.word	0x0800594c
 8003a00:	20000000 	.word	0x20000000
 8003a04:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a08:	f7fe f93e 	bl	8001c88 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	; 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e280      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a1a:	4baf      	ldr	r3, [pc, #700]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0x2a8>
 8003a26:	e014      	b.n	8003a52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7fe f92e 	bl	8001c88 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a30:	f7fe f92a 	bl	8001c88 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	; 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e26c      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a42:	4ba5      	ldr	r3, [pc, #660]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x2d0>
 8003a4e:	e000      	b.n	8003a52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d060      	beq.n	8003b20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d005      	beq.n	8003a70 <HAL_RCC_OscConfig+0x310>
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	2b0c      	cmp	r3, #12
 8003a68:	d119      	bne.n	8003a9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d116      	bne.n	8003a9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a70:	4b99      	ldr	r3, [pc, #612]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_RCC_OscConfig+0x328>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e249      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a88:	4b93      	ldr	r3, [pc, #588]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	061b      	lsls	r3, r3, #24
 8003a96:	4990      	ldr	r1, [pc, #576]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a9c:	e040      	b.n	8003b20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d023      	beq.n	8003aee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aa6:	4b8c      	ldr	r3, [pc, #560]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a8b      	ldr	r2, [pc, #556]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab2:	f7fe f8e9 	bl	8001c88 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aba:	f7fe f8e5 	bl	8001c88 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e227      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003acc:	4b82      	ldr	r3, [pc, #520]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad8:	4b7f      	ldr	r3, [pc, #508]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	061b      	lsls	r3, r3, #24
 8003ae6:	497c      	ldr	r1, [pc, #496]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
 8003aec:	e018      	b.n	8003b20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aee:	4b7a      	ldr	r3, [pc, #488]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a79      	ldr	r2, [pc, #484]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afa:	f7fe f8c5 	bl	8001c88 <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b02:	f7fe f8c1 	bl	8001c88 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e203      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b14:	4b70      	ldr	r3, [pc, #448]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1f0      	bne.n	8003b02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d03c      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d01c      	beq.n	8003b6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b34:	4b68      	ldr	r3, [pc, #416]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b3a:	4a67      	ldr	r2, [pc, #412]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b44:	f7fe f8a0 	bl	8001c88 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b4c:	f7fe f89c 	bl	8001c88 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e1de      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b5e:	4b5e      	ldr	r3, [pc, #376]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0ef      	beq.n	8003b4c <HAL_RCC_OscConfig+0x3ec>
 8003b6c:	e01b      	b.n	8003ba6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b6e:	4b5a      	ldr	r3, [pc, #360]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b74:	4a58      	ldr	r2, [pc, #352]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7e:	f7fe f883 	bl	8001c88 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b86:	f7fe f87f 	bl	8001c88 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e1c1      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b98:	4b4f      	ldr	r3, [pc, #316]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1ef      	bne.n	8003b86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80a6 	beq.w	8003d00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bb8:	4b47      	ldr	r3, [pc, #284]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10d      	bne.n	8003be0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc4:	4b44      	ldr	r3, [pc, #272]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	4a43      	ldr	r2, [pc, #268]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bce:	6593      	str	r3, [r2, #88]	; 0x58
 8003bd0:	4b41      	ldr	r3, [pc, #260]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003be0:	4b3e      	ldr	r3, [pc, #248]	; (8003cdc <HAL_RCC_OscConfig+0x57c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d118      	bne.n	8003c1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bec:	4b3b      	ldr	r3, [pc, #236]	; (8003cdc <HAL_RCC_OscConfig+0x57c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a3a      	ldr	r2, [pc, #232]	; (8003cdc <HAL_RCC_OscConfig+0x57c>)
 8003bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf8:	f7fe f846 	bl	8001c88 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c00:	f7fe f842 	bl	8001c88 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e184      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c12:	4b32      	ldr	r3, [pc, #200]	; (8003cdc <HAL_RCC_OscConfig+0x57c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d108      	bne.n	8003c38 <HAL_RCC_OscConfig+0x4d8>
 8003c26:	4b2c      	ldr	r3, [pc, #176]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2c:	4a2a      	ldr	r2, [pc, #168]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c36:	e024      	b.n	8003c82 <HAL_RCC_OscConfig+0x522>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b05      	cmp	r3, #5
 8003c3e:	d110      	bne.n	8003c62 <HAL_RCC_OscConfig+0x502>
 8003c40:	4b25      	ldr	r3, [pc, #148]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c46:	4a24      	ldr	r2, [pc, #144]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003c48:	f043 0304 	orr.w	r3, r3, #4
 8003c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c50:	4b21      	ldr	r3, [pc, #132]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c56:	4a20      	ldr	r2, [pc, #128]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c60:	e00f      	b.n	8003c82 <HAL_RCC_OscConfig+0x522>
 8003c62:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c68:	4a1b      	ldr	r2, [pc, #108]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003c6a:	f023 0301 	bic.w	r3, r3, #1
 8003c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c72:	4b19      	ldr	r3, [pc, #100]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c78:	4a17      	ldr	r2, [pc, #92]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003c7a:	f023 0304 	bic.w	r3, r3, #4
 8003c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d016      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8a:	f7fd fffd 	bl	8001c88 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c90:	e00a      	b.n	8003ca8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c92:	f7fd fff9 	bl	8001c88 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e139      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0ed      	beq.n	8003c92 <HAL_RCC_OscConfig+0x532>
 8003cb6:	e01a      	b.n	8003cee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb8:	f7fd ffe6 	bl	8001c88 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cbe:	e00f      	b.n	8003ce0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc0:	f7fd ffe2 	bl	8001c88 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d906      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e122      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
 8003cd6:	bf00      	nop
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ce0:	4b90      	ldr	r3, [pc, #576]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1e8      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cee:	7ffb      	ldrb	r3, [r7, #31]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d105      	bne.n	8003d00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf4:	4b8b      	ldr	r3, [pc, #556]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf8:	4a8a      	ldr	r2, [pc, #552]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8108 	beq.w	8003f1a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	f040 80d0 	bne.w	8003eb4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d14:	4b83      	ldr	r3, [pc, #524]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f003 0203 	and.w	r2, r3, #3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d130      	bne.n	8003d8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	3b01      	subs	r3, #1
 8003d34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d127      	bne.n	8003d8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d11f      	bne.n	8003d8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d54:	2a07      	cmp	r2, #7
 8003d56:	bf14      	ite	ne
 8003d58:	2201      	movne	r2, #1
 8003d5a:	2200      	moveq	r2, #0
 8003d5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d113      	bne.n	8003d8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6c:	085b      	lsrs	r3, r3, #1
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d109      	bne.n	8003d8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	085b      	lsrs	r3, r3, #1
 8003d82:	3b01      	subs	r3, #1
 8003d84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d06e      	beq.n	8003e68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	2b0c      	cmp	r3, #12
 8003d8e:	d069      	beq.n	8003e64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d90:	4b64      	ldr	r3, [pc, #400]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d105      	bne.n	8003da8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d9c:	4b61      	ldr	r3, [pc, #388]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e0b7      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003dac:	4b5d      	ldr	r3, [pc, #372]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a5c      	ldr	r2, [pc, #368]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003db6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003db8:	f7fd ff66 	bl	8001c88 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc0:	f7fd ff62 	bl	8001c88 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e0a4      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd2:	4b54      	ldr	r3, [pc, #336]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dde:	4b51      	ldr	r3, [pc, #324]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	4b51      	ldr	r3, [pc, #324]	; (8003f28 <HAL_RCC_OscConfig+0x7c8>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003dee:	3a01      	subs	r2, #1
 8003df0:	0112      	lsls	r2, r2, #4
 8003df2:	4311      	orrs	r1, r2
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003df8:	0212      	lsls	r2, r2, #8
 8003dfa:	4311      	orrs	r1, r2
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e00:	0852      	lsrs	r2, r2, #1
 8003e02:	3a01      	subs	r2, #1
 8003e04:	0552      	lsls	r2, r2, #21
 8003e06:	4311      	orrs	r1, r2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e0c:	0852      	lsrs	r2, r2, #1
 8003e0e:	3a01      	subs	r2, #1
 8003e10:	0652      	lsls	r2, r2, #25
 8003e12:	4311      	orrs	r1, r2
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e18:	0912      	lsrs	r2, r2, #4
 8003e1a:	0452      	lsls	r2, r2, #17
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	4941      	ldr	r1, [pc, #260]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e24:	4b3f      	ldr	r3, [pc, #252]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a3e      	ldr	r2, [pc, #248]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e30:	4b3c      	ldr	r3, [pc, #240]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	4a3b      	ldr	r2, [pc, #236]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e3c:	f7fd ff24 	bl	8001c88 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e44:	f7fd ff20 	bl	8001c88 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e062      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e56:	4b33      	ldr	r3, [pc, #204]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e62:	e05a      	b.n	8003f1a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e059      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e68:	4b2e      	ldr	r3, [pc, #184]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d152      	bne.n	8003f1a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e74:	4b2b      	ldr	r3, [pc, #172]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a2a      	ldr	r2, [pc, #168]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e80:	4b28      	ldr	r3, [pc, #160]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4a27      	ldr	r2, [pc, #156]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e8c:	f7fd fefc 	bl	8001c88 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e94:	f7fd fef8 	bl	8001c88 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e03a      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea6:	4b1f      	ldr	r3, [pc, #124]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0x734>
 8003eb2:	e032      	b.n	8003f1a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2b0c      	cmp	r3, #12
 8003eb8:	d02d      	beq.n	8003f16 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eba:	4b1a      	ldr	r3, [pc, #104]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a19      	ldr	r2, [pc, #100]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003ec0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ec4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003ec6:	4b17      	ldr	r3, [pc, #92]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d105      	bne.n	8003ede <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ed2:	4b14      	ldr	r3, [pc, #80]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	4a13      	ldr	r2, [pc, #76]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003ed8:	f023 0303 	bic.w	r3, r3, #3
 8003edc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ede:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	4a10      	ldr	r2, [pc, #64]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003ee4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eee:	f7fd fecb 	bl	8001c88 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef6:	f7fd fec7 	bl	8001c88 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e009      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1f0      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x796>
 8003f14:	e001      	b.n	8003f1a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3720      	adds	r7, #32
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40021000 	.word	0x40021000
 8003f28:	f99d808c 	.word	0xf99d808c

08003f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0c8      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f40:	4b66      	ldr	r3, [pc, #408]	; (80040dc <HAL_RCC_ClockConfig+0x1b0>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d910      	bls.n	8003f70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4e:	4b63      	ldr	r3, [pc, #396]	; (80040dc <HAL_RCC_ClockConfig+0x1b0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f023 0207 	bic.w	r2, r3, #7
 8003f56:	4961      	ldr	r1, [pc, #388]	; (80040dc <HAL_RCC_ClockConfig+0x1b0>)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5e:	4b5f      	ldr	r3, [pc, #380]	; (80040dc <HAL_RCC_ClockConfig+0x1b0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d001      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e0b0      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d04c      	beq.n	8004016 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d107      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f84:	4b56      	ldr	r3, [pc, #344]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d121      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e09e      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d107      	bne.n	8003fac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f9c:	4b50      	ldr	r3, [pc, #320]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d115      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e092      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d107      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fb4:	4b4a      	ldr	r3, [pc, #296]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d109      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e086      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fc4:	4b46      	ldr	r3, [pc, #280]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e07e      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fd4:	4b42      	ldr	r3, [pc, #264]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f023 0203 	bic.w	r2, r3, #3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	493f      	ldr	r1, [pc, #252]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe6:	f7fd fe4f 	bl	8001c88 <HAL_GetTick>
 8003fea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fec:	e00a      	b.n	8004004 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fee:	f7fd fe4b 	bl	8001c88 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e066      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004004:	4b36      	ldr	r3, [pc, #216]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 020c 	and.w	r2, r3, #12
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	429a      	cmp	r2, r3
 8004014:	d1eb      	bne.n	8003fee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d008      	beq.n	8004034 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004022:	4b2f      	ldr	r3, [pc, #188]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	492c      	ldr	r1, [pc, #176]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004030:	4313      	orrs	r3, r2
 8004032:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004034:	4b29      	ldr	r3, [pc, #164]	; (80040dc <HAL_RCC_ClockConfig+0x1b0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d210      	bcs.n	8004064 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004042:	4b26      	ldr	r3, [pc, #152]	; (80040dc <HAL_RCC_ClockConfig+0x1b0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f023 0207 	bic.w	r2, r3, #7
 800404a:	4924      	ldr	r1, [pc, #144]	; (80040dc <HAL_RCC_ClockConfig+0x1b0>)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	4313      	orrs	r3, r2
 8004050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004052:	4b22      	ldr	r3, [pc, #136]	; (80040dc <HAL_RCC_ClockConfig+0x1b0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e036      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004070:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4918      	ldr	r1, [pc, #96]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d009      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800408e:	4b14      	ldr	r3, [pc, #80]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	4910      	ldr	r1, [pc, #64]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040a2:	f000 f825 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 80040a6:	4601      	mov	r1, r0
 80040a8:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	4a0c      	ldr	r2, [pc, #48]	; (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 80040b4:	5cd3      	ldrb	r3, [r2, r3]
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	fa21 f303 	lsr.w	r3, r1, r3
 80040be:	4a0a      	ldr	r2, [pc, #40]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040c2:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <HAL_RCC_ClockConfig+0x1c0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fd fd8e 	bl	8001be8 <HAL_InitTick>
 80040cc:	4603      	mov	r3, r0
 80040ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80040d0:	7afb      	ldrb	r3, [r7, #11]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40022000 	.word	0x40022000
 80040e0:	40021000 	.word	0x40021000
 80040e4:	0800594c 	.word	0x0800594c
 80040e8:	20000000 	.word	0x20000000
 80040ec:	20000004 	.word	0x20000004

080040f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b089      	sub	sp, #36	; 0x24
 80040f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	61fb      	str	r3, [r7, #28]
 80040fa:	2300      	movs	r3, #0
 80040fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040fe:	4b3d      	ldr	r3, [pc, #244]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 030c 	and.w	r3, r3, #12
 8004106:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004108:	4b3a      	ldr	r3, [pc, #232]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x104>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_GetSysClockFreq+0x34>
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b0c      	cmp	r3, #12
 800411c:	d121      	bne.n	8004162 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d11e      	bne.n	8004162 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004124:	4b33      	ldr	r3, [pc, #204]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d107      	bne.n	8004140 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004130:	4b30      	ldr	r3, [pc, #192]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004136:	0a1b      	lsrs	r3, r3, #8
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	e005      	b.n	800414c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004140:	4b2c      	ldr	r3, [pc, #176]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800414c:	4a2a      	ldr	r2, [pc, #168]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004154:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10d      	bne.n	8004178 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004160:	e00a      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	2b04      	cmp	r3, #4
 8004166:	d102      	bne.n	800416e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004168:	4b24      	ldr	r3, [pc, #144]	; (80041fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800416a:	61bb      	str	r3, [r7, #24]
 800416c:	e004      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b08      	cmp	r3, #8
 8004172:	d101      	bne.n	8004178 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004174:	4b22      	ldr	r3, [pc, #136]	; (8004200 <HAL_RCC_GetSysClockFreq+0x110>)
 8004176:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	2b0c      	cmp	r3, #12
 800417c:	d133      	bne.n	80041e6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800417e:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d002      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0xa4>
 800418e:	2b03      	cmp	r3, #3
 8004190:	d003      	beq.n	800419a <HAL_RCC_GetSysClockFreq+0xaa>
 8004192:	e005      	b.n	80041a0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004194:	4b19      	ldr	r3, [pc, #100]	; (80041fc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004196:	617b      	str	r3, [r7, #20]
      break;
 8004198:	e005      	b.n	80041a6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800419a:	4b19      	ldr	r3, [pc, #100]	; (8004200 <HAL_RCC_GetSysClockFreq+0x110>)
 800419c:	617b      	str	r3, [r7, #20]
      break;
 800419e:	e002      	b.n	80041a6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	617b      	str	r3, [r7, #20]
      break;
 80041a4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041a6:	4b13      	ldr	r3, [pc, #76]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	091b      	lsrs	r3, r3, #4
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	3301      	adds	r3, #1
 80041b2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041b4:	4b0f      	ldr	r3, [pc, #60]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	0a1b      	lsrs	r3, r3, #8
 80041ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	fb02 f203 	mul.w	r2, r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ca:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041cc:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	0e5b      	lsrs	r3, r3, #25
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	3301      	adds	r3, #1
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041e6:	69bb      	ldr	r3, [r7, #24]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3724      	adds	r7, #36	; 0x24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	40021000 	.word	0x40021000
 80041f8:	08005964 	.word	0x08005964
 80041fc:	00f42400 	.word	0x00f42400
 8004200:	007a1200 	.word	0x007a1200

08004204 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004208:	4b03      	ldr	r3, [pc, #12]	; (8004218 <HAL_RCC_GetHCLKFreq+0x14>)
 800420a:	681b      	ldr	r3, [r3, #0]
}
 800420c:	4618      	mov	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	20000000 	.word	0x20000000

0800421c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004220:	f7ff fff0 	bl	8004204 <HAL_RCC_GetHCLKFreq>
 8004224:	4601      	mov	r1, r0
 8004226:	4b06      	ldr	r3, [pc, #24]	; (8004240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	0a1b      	lsrs	r3, r3, #8
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	4a04      	ldr	r2, [pc, #16]	; (8004244 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004232:	5cd3      	ldrb	r3, [r2, r3]
 8004234:	f003 031f 	and.w	r3, r3, #31
 8004238:	fa21 f303 	lsr.w	r3, r1, r3
}
 800423c:	4618      	mov	r0, r3
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40021000 	.word	0x40021000
 8004244:	0800595c 	.word	0x0800595c

08004248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800424c:	f7ff ffda 	bl	8004204 <HAL_RCC_GetHCLKFreq>
 8004250:	4601      	mov	r1, r0
 8004252:	4b06      	ldr	r3, [pc, #24]	; (800426c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	0adb      	lsrs	r3, r3, #11
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	4a04      	ldr	r2, [pc, #16]	; (8004270 <HAL_RCC_GetPCLK2Freq+0x28>)
 800425e:	5cd3      	ldrb	r3, [r2, r3]
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004268:	4618      	mov	r0, r3
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40021000 	.word	0x40021000
 8004270:	0800595c 	.word	0x0800595c

08004274 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800427c:	2300      	movs	r3, #0
 800427e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004280:	4b2a      	ldr	r3, [pc, #168]	; (800432c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800428c:	f7ff fa04 	bl	8003698 <HAL_PWREx_GetVoltageRange>
 8004290:	6178      	str	r0, [r7, #20]
 8004292:	e014      	b.n	80042be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004294:	4b25      	ldr	r3, [pc, #148]	; (800432c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004298:	4a24      	ldr	r2, [pc, #144]	; (800432c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800429a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800429e:	6593      	str	r3, [r2, #88]	; 0x58
 80042a0:	4b22      	ldr	r3, [pc, #136]	; (800432c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042ac:	f7ff f9f4 	bl	8003698 <HAL_PWREx_GetVoltageRange>
 80042b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042b2:	4b1e      	ldr	r3, [pc, #120]	; (800432c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b6:	4a1d      	ldr	r2, [pc, #116]	; (800432c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c4:	d10b      	bne.n	80042de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b80      	cmp	r3, #128	; 0x80
 80042ca:	d919      	bls.n	8004300 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2ba0      	cmp	r3, #160	; 0xa0
 80042d0:	d902      	bls.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042d2:	2302      	movs	r3, #2
 80042d4:	613b      	str	r3, [r7, #16]
 80042d6:	e013      	b.n	8004300 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042d8:	2301      	movs	r3, #1
 80042da:	613b      	str	r3, [r7, #16]
 80042dc:	e010      	b.n	8004300 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b80      	cmp	r3, #128	; 0x80
 80042e2:	d902      	bls.n	80042ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042e4:	2303      	movs	r3, #3
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	e00a      	b.n	8004300 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b80      	cmp	r3, #128	; 0x80
 80042ee:	d102      	bne.n	80042f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042f0:	2302      	movs	r3, #2
 80042f2:	613b      	str	r3, [r7, #16]
 80042f4:	e004      	b.n	8004300 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b70      	cmp	r3, #112	; 0x70
 80042fa:	d101      	bne.n	8004300 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042fc:	2301      	movs	r3, #1
 80042fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 0207 	bic.w	r2, r3, #7
 8004308:	4909      	ldr	r1, [pc, #36]	; (8004330 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004310:	4b07      	ldr	r3, [pc, #28]	; (8004330 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	429a      	cmp	r2, r3
 800431c:	d001      	beq.n	8004322 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40021000 	.word	0x40021000
 8004330:	40022000 	.word	0x40022000

08004334 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800433c:	2300      	movs	r3, #0
 800433e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004340:	2300      	movs	r3, #0
 8004342:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800434c:	2b00      	cmp	r3, #0
 800434e:	d03f      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004354:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004358:	d01c      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800435a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800435e:	d802      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00e      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004364:	e01f      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004366:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800436a:	d003      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800436c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004370:	d01c      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004372:	e018      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004374:	4b85      	ldr	r3, [pc, #532]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4a84      	ldr	r2, [pc, #528]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800437a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004380:	e015      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3304      	adds	r3, #4
 8004386:	2100      	movs	r1, #0
 8004388:	4618      	mov	r0, r3
 800438a:	f000 fab9 	bl	8004900 <RCCEx_PLLSAI1_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004392:	e00c      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3320      	adds	r3, #32
 8004398:	2100      	movs	r1, #0
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fba0 	bl	8004ae0 <RCCEx_PLLSAI2_Config>
 80043a0:	4603      	mov	r3, r0
 80043a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043a4:	e003      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	74fb      	strb	r3, [r7, #19]
      break;
 80043aa:	e000      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80043ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ae:	7cfb      	ldrb	r3, [r7, #19]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10b      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043b4:	4b75      	ldr	r3, [pc, #468]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043c2:	4972      	ldr	r1, [pc, #456]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043ca:	e001      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043cc:	7cfb      	ldrb	r3, [r7, #19]
 80043ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d03f      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043e4:	d01c      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80043e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043ea:	d802      	bhi.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00e      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xda>
 80043f0:	e01f      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80043f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043f6:	d003      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80043f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043fc:	d01c      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80043fe:	e018      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004400:	4b62      	ldr	r3, [pc, #392]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	4a61      	ldr	r2, [pc, #388]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800440a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800440c:	e015      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3304      	adds	r3, #4
 8004412:	2100      	movs	r1, #0
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fa73 	bl	8004900 <RCCEx_PLLSAI1_Config>
 800441a:	4603      	mov	r3, r0
 800441c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800441e:	e00c      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3320      	adds	r3, #32
 8004424:	2100      	movs	r1, #0
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fb5a 	bl	8004ae0 <RCCEx_PLLSAI2_Config>
 800442c:	4603      	mov	r3, r0
 800442e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004430:	e003      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	74fb      	strb	r3, [r7, #19]
      break;
 8004436:	e000      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800443a:	7cfb      	ldrb	r3, [r7, #19]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10b      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004440:	4b52      	ldr	r3, [pc, #328]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004446:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800444e:	494f      	ldr	r1, [pc, #316]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004456:	e001      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004458:	7cfb      	ldrb	r3, [r7, #19]
 800445a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80a0 	beq.w	80045aa <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800446a:	2300      	movs	r3, #0
 800446c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800446e:	4b47      	ldr	r3, [pc, #284]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800447e:	2300      	movs	r3, #0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00d      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004484:	4b41      	ldr	r3, [pc, #260]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004488:	4a40      	ldr	r2, [pc, #256]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800448a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448e:	6593      	str	r3, [r2, #88]	; 0x58
 8004490:	4b3e      	ldr	r3, [pc, #248]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449c:	2301      	movs	r3, #1
 800449e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044a0:	4b3b      	ldr	r3, [pc, #236]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a3a      	ldr	r2, [pc, #232]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80044a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044ac:	f7fd fbec 	bl	8001c88 <HAL_GetTick>
 80044b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044b2:	e009      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b4:	f7fd fbe8 	bl	8001c88 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d902      	bls.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	74fb      	strb	r3, [r7, #19]
        break;
 80044c6:	e005      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044c8:	4b31      	ldr	r3, [pc, #196]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0ef      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80044d4:	7cfb      	ldrb	r3, [r7, #19]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d15c      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044da:	4b2c      	ldr	r3, [pc, #176]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01f      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d019      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044f8:	4b24      	ldr	r3, [pc, #144]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004502:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004504:	4b21      	ldr	r3, [pc, #132]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	4a20      	ldr	r2, [pc, #128]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800450c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004514:	4b1d      	ldr	r3, [pc, #116]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451a:	4a1c      	ldr	r2, [pc, #112]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800451c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004524:	4a19      	ldr	r2, [pc, #100]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d016      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004536:	f7fd fba7 	bl	8001c88 <HAL_GetTick>
 800453a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800453c:	e00b      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453e:	f7fd fba3 	bl	8001c88 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f241 3288 	movw	r2, #5000	; 0x1388
 800454c:	4293      	cmp	r3, r2
 800454e:	d902      	bls.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	74fb      	strb	r3, [r7, #19]
            break;
 8004554:	e006      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004556:	4b0d      	ldr	r3, [pc, #52]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0ec      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004564:	7cfb      	ldrb	r3, [r7, #19]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10c      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800456a:	4b08      	ldr	r3, [pc, #32]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004570:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800457a:	4904      	ldr	r1, [pc, #16]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004582:	e009      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004584:	7cfb      	ldrb	r3, [r7, #19]
 8004586:	74bb      	strb	r3, [r7, #18]
 8004588:	e006      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800458a:	bf00      	nop
 800458c:	40021000 	.word	0x40021000
 8004590:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004594:	7cfb      	ldrb	r3, [r7, #19]
 8004596:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004598:	7c7b      	ldrb	r3, [r7, #17]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d105      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800459e:	4b9e      	ldr	r3, [pc, #632]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a2:	4a9d      	ldr	r2, [pc, #628]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045b6:	4b98      	ldr	r3, [pc, #608]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045bc:	f023 0203 	bic.w	r2, r3, #3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	4994      	ldr	r1, [pc, #592]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045d8:	4b8f      	ldr	r3, [pc, #572]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	f023 020c 	bic.w	r2, r3, #12
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e6:	498c      	ldr	r1, [pc, #560]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045fa:	4b87      	ldr	r3, [pc, #540]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004600:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	4983      	ldr	r1, [pc, #524]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800461c:	4b7e      	ldr	r3, [pc, #504]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462a:	497b      	ldr	r1, [pc, #492]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800463e:	4b76      	ldr	r3, [pc, #472]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464c:	4972      	ldr	r1, [pc, #456]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0320 	and.w	r3, r3, #32
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004660:	4b6d      	ldr	r3, [pc, #436]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004666:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800466e:	496a      	ldr	r1, [pc, #424]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004682:	4b65      	ldr	r3, [pc, #404]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004688:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004690:	4961      	ldr	r1, [pc, #388]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046a4:	4b5c      	ldr	r3, [pc, #368]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b2:	4959      	ldr	r1, [pc, #356]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046c6:	4b54      	ldr	r3, [pc, #336]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d4:	4950      	ldr	r1, [pc, #320]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046e8:	4b4b      	ldr	r3, [pc, #300]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f6:	4948      	ldr	r1, [pc, #288]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800470a:	4b43      	ldr	r3, [pc, #268]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004710:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004718:	493f      	ldr	r1, [pc, #252]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d028      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800472c:	4b3a      	ldr	r3, [pc, #232]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800472e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800473a:	4937      	ldr	r1, [pc, #220]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800474a:	d106      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800474c:	4b32      	ldr	r3, [pc, #200]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4a31      	ldr	r2, [pc, #196]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004756:	60d3      	str	r3, [r2, #12]
 8004758:	e011      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800475e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004762:	d10c      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3304      	adds	r3, #4
 8004768:	2101      	movs	r1, #1
 800476a:	4618      	mov	r0, r3
 800476c:	f000 f8c8 	bl	8004900 <RCCEx_PLLSAI1_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004774:	7cfb      	ldrb	r3, [r7, #19]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800477a:	7cfb      	ldrb	r3, [r7, #19]
 800477c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d028      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800478a:	4b23      	ldr	r3, [pc, #140]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004790:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004798:	491f      	ldr	r1, [pc, #124]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047a8:	d106      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047aa:	4b1b      	ldr	r3, [pc, #108]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	4a1a      	ldr	r2, [pc, #104]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047b4:	60d3      	str	r3, [r2, #12]
 80047b6:	e011      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047c0:	d10c      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3304      	adds	r3, #4
 80047c6:	2101      	movs	r1, #1
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 f899 	bl	8004900 <RCCEx_PLLSAI1_Config>
 80047ce:	4603      	mov	r3, r0
 80047d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047d2:	7cfb      	ldrb	r3, [r7, #19]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80047d8:	7cfb      	ldrb	r3, [r7, #19]
 80047da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d02b      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f6:	4908      	ldr	r1, [pc, #32]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004806:	d109      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004808:	4b03      	ldr	r3, [pc, #12]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	4a02      	ldr	r2, [pc, #8]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800480e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004812:	60d3      	str	r3, [r2, #12]
 8004814:	e014      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004820:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004824:	d10c      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3304      	adds	r3, #4
 800482a:	2101      	movs	r1, #1
 800482c:	4618      	mov	r0, r3
 800482e:	f000 f867 	bl	8004900 <RCCEx_PLLSAI1_Config>
 8004832:	4603      	mov	r3, r0
 8004834:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004836:	7cfb      	ldrb	r3, [r7, #19]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800483c:	7cfb      	ldrb	r3, [r7, #19]
 800483e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d02f      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800484c:	4b2b      	ldr	r3, [pc, #172]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004852:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800485a:	4928      	ldr	r1, [pc, #160]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800486a:	d10d      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3304      	adds	r3, #4
 8004870:	2102      	movs	r1, #2
 8004872:	4618      	mov	r0, r3
 8004874:	f000 f844 	bl	8004900 <RCCEx_PLLSAI1_Config>
 8004878:	4603      	mov	r3, r0
 800487a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800487c:	7cfb      	ldrb	r3, [r7, #19]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d014      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004882:	7cfb      	ldrb	r3, [r7, #19]
 8004884:	74bb      	strb	r3, [r7, #18]
 8004886:	e011      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800488c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004890:	d10c      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3320      	adds	r3, #32
 8004896:	2102      	movs	r1, #2
 8004898:	4618      	mov	r0, r3
 800489a:	f000 f921 	bl	8004ae0 <RCCEx_PLLSAI2_Config>
 800489e:	4603      	mov	r3, r0
 80048a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048a2:	7cfb      	ldrb	r3, [r7, #19]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80048a8:	7cfb      	ldrb	r3, [r7, #19]
 80048aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048b8:	4b10      	ldr	r3, [pc, #64]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048c6:	490d      	ldr	r1, [pc, #52]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00b      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048da:	4b08      	ldr	r3, [pc, #32]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ea:	4904      	ldr	r1, [pc, #16]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40021000 	.word	0x40021000

08004900 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800490e:	4b73      	ldr	r3, [pc, #460]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d018      	beq.n	800494c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800491a:	4b70      	ldr	r3, [pc, #448]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0203 	and.w	r2, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d10d      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
       ||
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004932:	4b6a      	ldr	r3, [pc, #424]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
       ||
 8004942:	429a      	cmp	r2, r3
 8004944:	d044      	beq.n	80049d0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	73fb      	strb	r3, [r7, #15]
 800494a:	e041      	b.n	80049d0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b02      	cmp	r3, #2
 8004952:	d00c      	beq.n	800496e <RCCEx_PLLSAI1_Config+0x6e>
 8004954:	2b03      	cmp	r3, #3
 8004956:	d013      	beq.n	8004980 <RCCEx_PLLSAI1_Config+0x80>
 8004958:	2b01      	cmp	r3, #1
 800495a:	d120      	bne.n	800499e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800495c:	4b5f      	ldr	r3, [pc, #380]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d11d      	bne.n	80049a4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800496c:	e01a      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800496e:	4b5b      	ldr	r3, [pc, #364]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004976:	2b00      	cmp	r3, #0
 8004978:	d116      	bne.n	80049a8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800497e:	e013      	b.n	80049a8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004980:	4b56      	ldr	r3, [pc, #344]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10f      	bne.n	80049ac <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800498c:	4b53      	ldr	r3, [pc, #332]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d109      	bne.n	80049ac <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800499c:	e006      	b.n	80049ac <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
      break;
 80049a2:	e004      	b.n	80049ae <RCCEx_PLLSAI1_Config+0xae>
      break;
 80049a4:	bf00      	nop
 80049a6:	e002      	b.n	80049ae <RCCEx_PLLSAI1_Config+0xae>
      break;
 80049a8:	bf00      	nop
 80049aa:	e000      	b.n	80049ae <RCCEx_PLLSAI1_Config+0xae>
      break;
 80049ac:	bf00      	nop
    }

    if(status == HAL_OK)
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10d      	bne.n	80049d0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049b4:	4b49      	ldr	r3, [pc, #292]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6819      	ldr	r1, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	3b01      	subs	r3, #1
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	430b      	orrs	r3, r1
 80049ca:	4944      	ldr	r1, [pc, #272]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d17d      	bne.n	8004ad2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049d6:	4b41      	ldr	r3, [pc, #260]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a40      	ldr	r2, [pc, #256]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 80049dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e2:	f7fd f951 	bl	8001c88 <HAL_GetTick>
 80049e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049e8:	e009      	b.n	80049fe <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049ea:	f7fd f94d 	bl	8001c88 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d902      	bls.n	80049fe <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	73fb      	strb	r3, [r7, #15]
        break;
 80049fc:	e005      	b.n	8004a0a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049fe:	4b37      	ldr	r3, [pc, #220]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1ef      	bne.n	80049ea <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d160      	bne.n	8004ad2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d111      	bne.n	8004a3a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a16:	4b31      	ldr	r3, [pc, #196]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6892      	ldr	r2, [r2, #8]
 8004a26:	0211      	lsls	r1, r2, #8
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	68d2      	ldr	r2, [r2, #12]
 8004a2c:	0912      	lsrs	r2, r2, #4
 8004a2e:	0452      	lsls	r2, r2, #17
 8004a30:	430a      	orrs	r2, r1
 8004a32:	492a      	ldr	r1, [pc, #168]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	610b      	str	r3, [r1, #16]
 8004a38:	e027      	b.n	8004a8a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d112      	bne.n	8004a66 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a40:	4b26      	ldr	r3, [pc, #152]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6892      	ldr	r2, [r2, #8]
 8004a50:	0211      	lsls	r1, r2, #8
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6912      	ldr	r2, [r2, #16]
 8004a56:	0852      	lsrs	r2, r2, #1
 8004a58:	3a01      	subs	r2, #1
 8004a5a:	0552      	lsls	r2, r2, #21
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	491f      	ldr	r1, [pc, #124]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	610b      	str	r3, [r1, #16]
 8004a64:	e011      	b.n	8004a8a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a66:	4b1d      	ldr	r3, [pc, #116]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6892      	ldr	r2, [r2, #8]
 8004a76:	0211      	lsls	r1, r2, #8
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6952      	ldr	r2, [r2, #20]
 8004a7c:	0852      	lsrs	r2, r2, #1
 8004a7e:	3a01      	subs	r2, #1
 8004a80:	0652      	lsls	r2, r2, #25
 8004a82:	430a      	orrs	r2, r1
 8004a84:	4915      	ldr	r1, [pc, #84]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a8a:	4b14      	ldr	r3, [pc, #80]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a13      	ldr	r2, [pc, #76]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a96:	f7fd f8f7 	bl	8001c88 <HAL_GetTick>
 8004a9a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a9c:	e009      	b.n	8004ab2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a9e:	f7fd f8f3 	bl	8001c88 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d902      	bls.n	8004ab2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	73fb      	strb	r3, [r7, #15]
          break;
 8004ab0:	e005      	b.n	8004abe <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0ef      	beq.n	8004a9e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d106      	bne.n	8004ad2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ac4:	4b05      	ldr	r3, [pc, #20]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	4903      	ldr	r1, [pc, #12]	; (8004adc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40021000 	.word	0x40021000

08004ae0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004aee:	4b68      	ldr	r3, [pc, #416]	; (8004c90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d018      	beq.n	8004b2c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004afa:	4b65      	ldr	r3, [pc, #404]	; (8004c90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f003 0203 	and.w	r2, r3, #3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d10d      	bne.n	8004b26 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
       ||
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d009      	beq.n	8004b26 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b12:	4b5f      	ldr	r3, [pc, #380]	; (8004c90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	091b      	lsrs	r3, r3, #4
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
       ||
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d044      	beq.n	8004bb0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	73fb      	strb	r3, [r7, #15]
 8004b2a:	e041      	b.n	8004bb0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d00c      	beq.n	8004b4e <RCCEx_PLLSAI2_Config+0x6e>
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d013      	beq.n	8004b60 <RCCEx_PLLSAI2_Config+0x80>
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d120      	bne.n	8004b7e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b3c:	4b54      	ldr	r3, [pc, #336]	; (8004c90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d11d      	bne.n	8004b84 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b4c:	e01a      	b.n	8004b84 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b4e:	4b50      	ldr	r3, [pc, #320]	; (8004c90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d116      	bne.n	8004b88 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b5e:	e013      	b.n	8004b88 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b60:	4b4b      	ldr	r3, [pc, #300]	; (8004c90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10f      	bne.n	8004b8c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b6c:	4b48      	ldr	r3, [pc, #288]	; (8004c90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b7c:	e006      	b.n	8004b8c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	73fb      	strb	r3, [r7, #15]
      break;
 8004b82:	e004      	b.n	8004b8e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004b84:	bf00      	nop
 8004b86:	e002      	b.n	8004b8e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004b88:	bf00      	nop
 8004b8a:	e000      	b.n	8004b8e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004b8c:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10d      	bne.n	8004bb0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b94:	4b3e      	ldr	r3, [pc, #248]	; (8004c90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6819      	ldr	r1, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	4939      	ldr	r1, [pc, #228]	; (8004c90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d167      	bne.n	8004c86 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004bb6:	4b36      	ldr	r3, [pc, #216]	; (8004c90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a35      	ldr	r2, [pc, #212]	; (8004c90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc2:	f7fd f861 	bl	8001c88 <HAL_GetTick>
 8004bc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bc8:	e009      	b.n	8004bde <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bca:	f7fd f85d 	bl	8001c88 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d902      	bls.n	8004bde <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	73fb      	strb	r3, [r7, #15]
        break;
 8004bdc:	e005      	b.n	8004bea <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bde:	4b2c      	ldr	r3, [pc, #176]	; (8004c90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1ef      	bne.n	8004bca <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d14a      	bne.n	8004c86 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d111      	bne.n	8004c1a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bf6:	4b26      	ldr	r3, [pc, #152]	; (8004c90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6892      	ldr	r2, [r2, #8]
 8004c06:	0211      	lsls	r1, r2, #8
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	68d2      	ldr	r2, [r2, #12]
 8004c0c:	0912      	lsrs	r2, r2, #4
 8004c0e:	0452      	lsls	r2, r2, #17
 8004c10:	430a      	orrs	r2, r1
 8004c12:	491f      	ldr	r1, [pc, #124]	; (8004c90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	614b      	str	r3, [r1, #20]
 8004c18:	e011      	b.n	8004c3e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c1a:	4b1d      	ldr	r3, [pc, #116]	; (8004c90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6892      	ldr	r2, [r2, #8]
 8004c2a:	0211      	lsls	r1, r2, #8
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6912      	ldr	r2, [r2, #16]
 8004c30:	0852      	lsrs	r2, r2, #1
 8004c32:	3a01      	subs	r2, #1
 8004c34:	0652      	lsls	r2, r2, #25
 8004c36:	430a      	orrs	r2, r1
 8004c38:	4915      	ldr	r1, [pc, #84]	; (8004c90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c3e:	4b14      	ldr	r3, [pc, #80]	; (8004c90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a13      	ldr	r2, [pc, #76]	; (8004c90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c48:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4a:	f7fd f81d 	bl	8001c88 <HAL_GetTick>
 8004c4e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c50:	e009      	b.n	8004c66 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c52:	f7fd f819 	bl	8001c88 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d902      	bls.n	8004c66 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	73fb      	strb	r3, [r7, #15]
          break;
 8004c64:	e005      	b.n	8004c72 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c66:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0ef      	beq.n	8004c52 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d106      	bne.n	8004c86 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c78:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c7a:	695a      	ldr	r2, [r3, #20]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	4903      	ldr	r1, [pc, #12]	; (8004c90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40021000 	.word	0x40021000

08004c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e049      	b.n	8004d3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fc fe88 	bl	80019d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	f000 f8a6 	bl	8004e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d001      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e04f      	b.n	8004dfc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a23      	ldr	r2, [pc, #140]	; (8004e08 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d01d      	beq.n	8004dba <HAL_TIM_Base_Start_IT+0x76>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d86:	d018      	beq.n	8004dba <HAL_TIM_Base_Start_IT+0x76>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a1f      	ldr	r2, [pc, #124]	; (8004e0c <HAL_TIM_Base_Start_IT+0xc8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d013      	beq.n	8004dba <HAL_TIM_Base_Start_IT+0x76>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1e      	ldr	r2, [pc, #120]	; (8004e10 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00e      	beq.n	8004dba <HAL_TIM_Base_Start_IT+0x76>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a1c      	ldr	r2, [pc, #112]	; (8004e14 <HAL_TIM_Base_Start_IT+0xd0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d009      	beq.n	8004dba <HAL_TIM_Base_Start_IT+0x76>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a1b      	ldr	r2, [pc, #108]	; (8004e18 <HAL_TIM_Base_Start_IT+0xd4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d004      	beq.n	8004dba <HAL_TIM_Base_Start_IT+0x76>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a19      	ldr	r2, [pc, #100]	; (8004e1c <HAL_TIM_Base_Start_IT+0xd8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d115      	bne.n	8004de6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	4b17      	ldr	r3, [pc, #92]	; (8004e20 <HAL_TIM_Base_Start_IT+0xdc>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b06      	cmp	r3, #6
 8004dca:	d015      	beq.n	8004df8 <HAL_TIM_Base_Start_IT+0xb4>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd2:	d011      	beq.n	8004df8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0201 	orr.w	r2, r2, #1
 8004de2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de4:	e008      	b.n	8004df8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f042 0201 	orr.w	r2, r2, #1
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	e000      	b.n	8004dfa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	40012c00 	.word	0x40012c00
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800
 8004e14:	40000c00 	.word	0x40000c00
 8004e18:	40013400 	.word	0x40013400
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	00010007 	.word	0x00010007

08004e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a40      	ldr	r2, [pc, #256]	; (8004f38 <TIM_Base_SetConfig+0x114>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d013      	beq.n	8004e64 <TIM_Base_SetConfig+0x40>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e42:	d00f      	beq.n	8004e64 <TIM_Base_SetConfig+0x40>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a3d      	ldr	r2, [pc, #244]	; (8004f3c <TIM_Base_SetConfig+0x118>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00b      	beq.n	8004e64 <TIM_Base_SetConfig+0x40>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a3c      	ldr	r2, [pc, #240]	; (8004f40 <TIM_Base_SetConfig+0x11c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d007      	beq.n	8004e64 <TIM_Base_SetConfig+0x40>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a3b      	ldr	r2, [pc, #236]	; (8004f44 <TIM_Base_SetConfig+0x120>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d003      	beq.n	8004e64 <TIM_Base_SetConfig+0x40>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a3a      	ldr	r2, [pc, #232]	; (8004f48 <TIM_Base_SetConfig+0x124>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d108      	bne.n	8004e76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a2f      	ldr	r2, [pc, #188]	; (8004f38 <TIM_Base_SetConfig+0x114>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d01f      	beq.n	8004ebe <TIM_Base_SetConfig+0x9a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e84:	d01b      	beq.n	8004ebe <TIM_Base_SetConfig+0x9a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a2c      	ldr	r2, [pc, #176]	; (8004f3c <TIM_Base_SetConfig+0x118>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d017      	beq.n	8004ebe <TIM_Base_SetConfig+0x9a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a2b      	ldr	r2, [pc, #172]	; (8004f40 <TIM_Base_SetConfig+0x11c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d013      	beq.n	8004ebe <TIM_Base_SetConfig+0x9a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a2a      	ldr	r2, [pc, #168]	; (8004f44 <TIM_Base_SetConfig+0x120>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00f      	beq.n	8004ebe <TIM_Base_SetConfig+0x9a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a29      	ldr	r2, [pc, #164]	; (8004f48 <TIM_Base_SetConfig+0x124>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00b      	beq.n	8004ebe <TIM_Base_SetConfig+0x9a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a28      	ldr	r2, [pc, #160]	; (8004f4c <TIM_Base_SetConfig+0x128>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d007      	beq.n	8004ebe <TIM_Base_SetConfig+0x9a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a27      	ldr	r2, [pc, #156]	; (8004f50 <TIM_Base_SetConfig+0x12c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d003      	beq.n	8004ebe <TIM_Base_SetConfig+0x9a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a26      	ldr	r2, [pc, #152]	; (8004f54 <TIM_Base_SetConfig+0x130>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d108      	bne.n	8004ed0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a10      	ldr	r2, [pc, #64]	; (8004f38 <TIM_Base_SetConfig+0x114>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00f      	beq.n	8004f1c <TIM_Base_SetConfig+0xf8>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a12      	ldr	r2, [pc, #72]	; (8004f48 <TIM_Base_SetConfig+0x124>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00b      	beq.n	8004f1c <TIM_Base_SetConfig+0xf8>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a11      	ldr	r2, [pc, #68]	; (8004f4c <TIM_Base_SetConfig+0x128>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d007      	beq.n	8004f1c <TIM_Base_SetConfig+0xf8>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a10      	ldr	r2, [pc, #64]	; (8004f50 <TIM_Base_SetConfig+0x12c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d003      	beq.n	8004f1c <TIM_Base_SetConfig+0xf8>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a0f      	ldr	r2, [pc, #60]	; (8004f54 <TIM_Base_SetConfig+0x130>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d103      	bne.n	8004f24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	615a      	str	r2, [r3, #20]
}
 8004f2a:	bf00      	nop
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40000800 	.word	0x40000800
 8004f44:	40000c00 	.word	0x40000c00
 8004f48:	40013400 	.word	0x40013400
 8004f4c:	40014000 	.word	0x40014000
 8004f50:	40014400 	.word	0x40014400
 8004f54:	40014800 	.word	0x40014800

08004f58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e068      	b.n	8005042 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a2e      	ldr	r2, [pc, #184]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d004      	beq.n	8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a2d      	ldr	r2, [pc, #180]	; (8005054 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d108      	bne.n	8004fb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004faa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a1e      	ldr	r2, [pc, #120]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d01d      	beq.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe2:	d018      	beq.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a1b      	ldr	r2, [pc, #108]	; (8005058 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d013      	beq.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a1a      	ldr	r2, [pc, #104]	; (800505c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00e      	beq.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a18      	ldr	r2, [pc, #96]	; (8005060 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d009      	beq.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a13      	ldr	r2, [pc, #76]	; (8005054 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d004      	beq.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a14      	ldr	r2, [pc, #80]	; (8005064 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d10c      	bne.n	8005030 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800501c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	4313      	orrs	r3, r2
 8005026:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40012c00 	.word	0x40012c00
 8005054:	40013400 	.word	0x40013400
 8005058:	40000400 	.word	0x40000400
 800505c:	40000800 	.word	0x40000800
 8005060:	40000c00 	.word	0x40000c00
 8005064:	40014000 	.word	0x40014000

08005068 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e040      	b.n	80050fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fc fcc0 	bl	8001a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2224      	movs	r2, #36	; 0x24
 8005094:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0201 	bic.w	r2, r2, #1
 80050a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f82c 	bl	8005104 <UART_SetConfig>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d101      	bne.n	80050b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e022      	b.n	80050fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 faaa 	bl	8005618 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689a      	ldr	r2, [r3, #8]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fb31 	bl	800575c <UART_CheckIdleState>
 80050fa:	4603      	mov	r3, r0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005104:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005108:	b088      	sub	sp, #32
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	4313      	orrs	r3, r2
 8005128:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	4bac      	ldr	r3, [pc, #688]	; (80053e4 <UART_SetConfig+0x2e0>)
 8005132:	4013      	ands	r3, r2
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	69f9      	ldr	r1, [r7, #28]
 800513a:	430b      	orrs	r3, r1
 800513c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4aa2      	ldr	r2, [pc, #648]	; (80053e8 <UART_SetConfig+0x2e4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d004      	beq.n	800516e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	4313      	orrs	r3, r2
 800516c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	430a      	orrs	r2, r1
 8005180:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a99      	ldr	r2, [pc, #612]	; (80053ec <UART_SetConfig+0x2e8>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d121      	bne.n	80051d0 <UART_SetConfig+0xcc>
 800518c:	4b98      	ldr	r3, [pc, #608]	; (80053f0 <UART_SetConfig+0x2ec>)
 800518e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	2b03      	cmp	r3, #3
 8005198:	d816      	bhi.n	80051c8 <UART_SetConfig+0xc4>
 800519a:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <UART_SetConfig+0x9c>)
 800519c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a0:	080051b1 	.word	0x080051b1
 80051a4:	080051bd 	.word	0x080051bd
 80051a8:	080051b7 	.word	0x080051b7
 80051ac:	080051c3 	.word	0x080051c3
 80051b0:	2301      	movs	r3, #1
 80051b2:	76fb      	strb	r3, [r7, #27]
 80051b4:	e0e8      	b.n	8005388 <UART_SetConfig+0x284>
 80051b6:	2302      	movs	r3, #2
 80051b8:	76fb      	strb	r3, [r7, #27]
 80051ba:	e0e5      	b.n	8005388 <UART_SetConfig+0x284>
 80051bc:	2304      	movs	r3, #4
 80051be:	76fb      	strb	r3, [r7, #27]
 80051c0:	e0e2      	b.n	8005388 <UART_SetConfig+0x284>
 80051c2:	2308      	movs	r3, #8
 80051c4:	76fb      	strb	r3, [r7, #27]
 80051c6:	e0df      	b.n	8005388 <UART_SetConfig+0x284>
 80051c8:	2310      	movs	r3, #16
 80051ca:	76fb      	strb	r3, [r7, #27]
 80051cc:	bf00      	nop
 80051ce:	e0db      	b.n	8005388 <UART_SetConfig+0x284>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a87      	ldr	r2, [pc, #540]	; (80053f4 <UART_SetConfig+0x2f0>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d134      	bne.n	8005244 <UART_SetConfig+0x140>
 80051da:	4b85      	ldr	r3, [pc, #532]	; (80053f0 <UART_SetConfig+0x2ec>)
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e0:	f003 030c 	and.w	r3, r3, #12
 80051e4:	2b0c      	cmp	r3, #12
 80051e6:	d829      	bhi.n	800523c <UART_SetConfig+0x138>
 80051e8:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <UART_SetConfig+0xec>)
 80051ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ee:	bf00      	nop
 80051f0:	08005225 	.word	0x08005225
 80051f4:	0800523d 	.word	0x0800523d
 80051f8:	0800523d 	.word	0x0800523d
 80051fc:	0800523d 	.word	0x0800523d
 8005200:	08005231 	.word	0x08005231
 8005204:	0800523d 	.word	0x0800523d
 8005208:	0800523d 	.word	0x0800523d
 800520c:	0800523d 	.word	0x0800523d
 8005210:	0800522b 	.word	0x0800522b
 8005214:	0800523d 	.word	0x0800523d
 8005218:	0800523d 	.word	0x0800523d
 800521c:	0800523d 	.word	0x0800523d
 8005220:	08005237 	.word	0x08005237
 8005224:	2300      	movs	r3, #0
 8005226:	76fb      	strb	r3, [r7, #27]
 8005228:	e0ae      	b.n	8005388 <UART_SetConfig+0x284>
 800522a:	2302      	movs	r3, #2
 800522c:	76fb      	strb	r3, [r7, #27]
 800522e:	e0ab      	b.n	8005388 <UART_SetConfig+0x284>
 8005230:	2304      	movs	r3, #4
 8005232:	76fb      	strb	r3, [r7, #27]
 8005234:	e0a8      	b.n	8005388 <UART_SetConfig+0x284>
 8005236:	2308      	movs	r3, #8
 8005238:	76fb      	strb	r3, [r7, #27]
 800523a:	e0a5      	b.n	8005388 <UART_SetConfig+0x284>
 800523c:	2310      	movs	r3, #16
 800523e:	76fb      	strb	r3, [r7, #27]
 8005240:	bf00      	nop
 8005242:	e0a1      	b.n	8005388 <UART_SetConfig+0x284>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a6b      	ldr	r2, [pc, #428]	; (80053f8 <UART_SetConfig+0x2f4>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d120      	bne.n	8005290 <UART_SetConfig+0x18c>
 800524e:	4b68      	ldr	r3, [pc, #416]	; (80053f0 <UART_SetConfig+0x2ec>)
 8005250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005254:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005258:	2b10      	cmp	r3, #16
 800525a:	d00f      	beq.n	800527c <UART_SetConfig+0x178>
 800525c:	2b10      	cmp	r3, #16
 800525e:	d802      	bhi.n	8005266 <UART_SetConfig+0x162>
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <UART_SetConfig+0x16c>
 8005264:	e010      	b.n	8005288 <UART_SetConfig+0x184>
 8005266:	2b20      	cmp	r3, #32
 8005268:	d005      	beq.n	8005276 <UART_SetConfig+0x172>
 800526a:	2b30      	cmp	r3, #48	; 0x30
 800526c:	d009      	beq.n	8005282 <UART_SetConfig+0x17e>
 800526e:	e00b      	b.n	8005288 <UART_SetConfig+0x184>
 8005270:	2300      	movs	r3, #0
 8005272:	76fb      	strb	r3, [r7, #27]
 8005274:	e088      	b.n	8005388 <UART_SetConfig+0x284>
 8005276:	2302      	movs	r3, #2
 8005278:	76fb      	strb	r3, [r7, #27]
 800527a:	e085      	b.n	8005388 <UART_SetConfig+0x284>
 800527c:	2304      	movs	r3, #4
 800527e:	76fb      	strb	r3, [r7, #27]
 8005280:	e082      	b.n	8005388 <UART_SetConfig+0x284>
 8005282:	2308      	movs	r3, #8
 8005284:	76fb      	strb	r3, [r7, #27]
 8005286:	e07f      	b.n	8005388 <UART_SetConfig+0x284>
 8005288:	2310      	movs	r3, #16
 800528a:	76fb      	strb	r3, [r7, #27]
 800528c:	bf00      	nop
 800528e:	e07b      	b.n	8005388 <UART_SetConfig+0x284>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a59      	ldr	r2, [pc, #356]	; (80053fc <UART_SetConfig+0x2f8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d120      	bne.n	80052dc <UART_SetConfig+0x1d8>
 800529a:	4b55      	ldr	r3, [pc, #340]	; (80053f0 <UART_SetConfig+0x2ec>)
 800529c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052a4:	2b40      	cmp	r3, #64	; 0x40
 80052a6:	d00f      	beq.n	80052c8 <UART_SetConfig+0x1c4>
 80052a8:	2b40      	cmp	r3, #64	; 0x40
 80052aa:	d802      	bhi.n	80052b2 <UART_SetConfig+0x1ae>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d005      	beq.n	80052bc <UART_SetConfig+0x1b8>
 80052b0:	e010      	b.n	80052d4 <UART_SetConfig+0x1d0>
 80052b2:	2b80      	cmp	r3, #128	; 0x80
 80052b4:	d005      	beq.n	80052c2 <UART_SetConfig+0x1be>
 80052b6:	2bc0      	cmp	r3, #192	; 0xc0
 80052b8:	d009      	beq.n	80052ce <UART_SetConfig+0x1ca>
 80052ba:	e00b      	b.n	80052d4 <UART_SetConfig+0x1d0>
 80052bc:	2300      	movs	r3, #0
 80052be:	76fb      	strb	r3, [r7, #27]
 80052c0:	e062      	b.n	8005388 <UART_SetConfig+0x284>
 80052c2:	2302      	movs	r3, #2
 80052c4:	76fb      	strb	r3, [r7, #27]
 80052c6:	e05f      	b.n	8005388 <UART_SetConfig+0x284>
 80052c8:	2304      	movs	r3, #4
 80052ca:	76fb      	strb	r3, [r7, #27]
 80052cc:	e05c      	b.n	8005388 <UART_SetConfig+0x284>
 80052ce:	2308      	movs	r3, #8
 80052d0:	76fb      	strb	r3, [r7, #27]
 80052d2:	e059      	b.n	8005388 <UART_SetConfig+0x284>
 80052d4:	2310      	movs	r3, #16
 80052d6:	76fb      	strb	r3, [r7, #27]
 80052d8:	bf00      	nop
 80052da:	e055      	b.n	8005388 <UART_SetConfig+0x284>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a47      	ldr	r2, [pc, #284]	; (8005400 <UART_SetConfig+0x2fc>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d124      	bne.n	8005330 <UART_SetConfig+0x22c>
 80052e6:	4b42      	ldr	r3, [pc, #264]	; (80053f0 <UART_SetConfig+0x2ec>)
 80052e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f4:	d012      	beq.n	800531c <UART_SetConfig+0x218>
 80052f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fa:	d802      	bhi.n	8005302 <UART_SetConfig+0x1fe>
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d007      	beq.n	8005310 <UART_SetConfig+0x20c>
 8005300:	e012      	b.n	8005328 <UART_SetConfig+0x224>
 8005302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005306:	d006      	beq.n	8005316 <UART_SetConfig+0x212>
 8005308:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800530c:	d009      	beq.n	8005322 <UART_SetConfig+0x21e>
 800530e:	e00b      	b.n	8005328 <UART_SetConfig+0x224>
 8005310:	2300      	movs	r3, #0
 8005312:	76fb      	strb	r3, [r7, #27]
 8005314:	e038      	b.n	8005388 <UART_SetConfig+0x284>
 8005316:	2302      	movs	r3, #2
 8005318:	76fb      	strb	r3, [r7, #27]
 800531a:	e035      	b.n	8005388 <UART_SetConfig+0x284>
 800531c:	2304      	movs	r3, #4
 800531e:	76fb      	strb	r3, [r7, #27]
 8005320:	e032      	b.n	8005388 <UART_SetConfig+0x284>
 8005322:	2308      	movs	r3, #8
 8005324:	76fb      	strb	r3, [r7, #27]
 8005326:	e02f      	b.n	8005388 <UART_SetConfig+0x284>
 8005328:	2310      	movs	r3, #16
 800532a:	76fb      	strb	r3, [r7, #27]
 800532c:	bf00      	nop
 800532e:	e02b      	b.n	8005388 <UART_SetConfig+0x284>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a2c      	ldr	r2, [pc, #176]	; (80053e8 <UART_SetConfig+0x2e4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d124      	bne.n	8005384 <UART_SetConfig+0x280>
 800533a:	4b2d      	ldr	r3, [pc, #180]	; (80053f0 <UART_SetConfig+0x2ec>)
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005340:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005348:	d012      	beq.n	8005370 <UART_SetConfig+0x26c>
 800534a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800534e:	d802      	bhi.n	8005356 <UART_SetConfig+0x252>
 8005350:	2b00      	cmp	r3, #0
 8005352:	d007      	beq.n	8005364 <UART_SetConfig+0x260>
 8005354:	e012      	b.n	800537c <UART_SetConfig+0x278>
 8005356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800535a:	d006      	beq.n	800536a <UART_SetConfig+0x266>
 800535c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005360:	d009      	beq.n	8005376 <UART_SetConfig+0x272>
 8005362:	e00b      	b.n	800537c <UART_SetConfig+0x278>
 8005364:	2300      	movs	r3, #0
 8005366:	76fb      	strb	r3, [r7, #27]
 8005368:	e00e      	b.n	8005388 <UART_SetConfig+0x284>
 800536a:	2302      	movs	r3, #2
 800536c:	76fb      	strb	r3, [r7, #27]
 800536e:	e00b      	b.n	8005388 <UART_SetConfig+0x284>
 8005370:	2304      	movs	r3, #4
 8005372:	76fb      	strb	r3, [r7, #27]
 8005374:	e008      	b.n	8005388 <UART_SetConfig+0x284>
 8005376:	2308      	movs	r3, #8
 8005378:	76fb      	strb	r3, [r7, #27]
 800537a:	e005      	b.n	8005388 <UART_SetConfig+0x284>
 800537c:	2310      	movs	r3, #16
 800537e:	76fb      	strb	r3, [r7, #27]
 8005380:	bf00      	nop
 8005382:	e001      	b.n	8005388 <UART_SetConfig+0x284>
 8005384:	2310      	movs	r3, #16
 8005386:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a16      	ldr	r2, [pc, #88]	; (80053e8 <UART_SetConfig+0x2e4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	f040 8087 	bne.w	80054a2 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005394:	7efb      	ldrb	r3, [r7, #27]
 8005396:	2b08      	cmp	r3, #8
 8005398:	d836      	bhi.n	8005408 <UART_SetConfig+0x304>
 800539a:	a201      	add	r2, pc, #4	; (adr r2, 80053a0 <UART_SetConfig+0x29c>)
 800539c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a0:	080053c5 	.word	0x080053c5
 80053a4:	08005409 	.word	0x08005409
 80053a8:	080053cd 	.word	0x080053cd
 80053ac:	08005409 	.word	0x08005409
 80053b0:	080053d3 	.word	0x080053d3
 80053b4:	08005409 	.word	0x08005409
 80053b8:	08005409 	.word	0x08005409
 80053bc:	08005409 	.word	0x08005409
 80053c0:	080053db 	.word	0x080053db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c4:	f7fe ff2a 	bl	800421c <HAL_RCC_GetPCLK1Freq>
 80053c8:	6178      	str	r0, [r7, #20]
        break;
 80053ca:	e022      	b.n	8005412 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053cc:	4b0d      	ldr	r3, [pc, #52]	; (8005404 <UART_SetConfig+0x300>)
 80053ce:	617b      	str	r3, [r7, #20]
        break;
 80053d0:	e01f      	b.n	8005412 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053d2:	f7fe fe8d 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 80053d6:	6178      	str	r0, [r7, #20]
        break;
 80053d8:	e01b      	b.n	8005412 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053de:	617b      	str	r3, [r7, #20]
        break;
 80053e0:	e017      	b.n	8005412 <UART_SetConfig+0x30e>
 80053e2:	bf00      	nop
 80053e4:	efff69f3 	.word	0xefff69f3
 80053e8:	40008000 	.word	0x40008000
 80053ec:	40013800 	.word	0x40013800
 80053f0:	40021000 	.word	0x40021000
 80053f4:	40004400 	.word	0x40004400
 80053f8:	40004800 	.word	0x40004800
 80053fc:	40004c00 	.word	0x40004c00
 8005400:	40005000 	.word	0x40005000
 8005404:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	76bb      	strb	r3, [r7, #26]
        break;
 8005410:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 80f1 	beq.w	80055fc <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	4613      	mov	r3, r2
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	4413      	add	r3, r2
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	429a      	cmp	r2, r3
 8005428:	d305      	bcc.n	8005436 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	429a      	cmp	r2, r3
 8005434:	d902      	bls.n	800543c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	76bb      	strb	r3, [r7, #26]
 800543a:	e0df      	b.n	80055fc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	4619      	mov	r1, r3
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	f04f 0400 	mov.w	r4, #0
 800544c:	0214      	lsls	r4, r2, #8
 800544e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005452:	020b      	lsls	r3, r1, #8
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6852      	ldr	r2, [r2, #4]
 8005458:	0852      	lsrs	r2, r2, #1
 800545a:	4611      	mov	r1, r2
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	eb13 0b01 	adds.w	fp, r3, r1
 8005464:	eb44 0c02 	adc.w	ip, r4, r2
 8005468:	4658      	mov	r0, fp
 800546a:	4661      	mov	r1, ip
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f04f 0400 	mov.w	r4, #0
 8005474:	461a      	mov	r2, r3
 8005476:	4623      	mov	r3, r4
 8005478:	f7fb fac4 	bl	8000a04 <__aeabi_uldivmod>
 800547c:	4603      	mov	r3, r0
 800547e:	460c      	mov	r4, r1
 8005480:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005488:	d308      	bcc.n	800549c <UART_SetConfig+0x398>
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005490:	d204      	bcs.n	800549c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	60da      	str	r2, [r3, #12]
 800549a:	e0af      	b.n	80055fc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	76bb      	strb	r3, [r7, #26]
 80054a0:	e0ac      	b.n	80055fc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054aa:	d15b      	bne.n	8005564 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80054ac:	7efb      	ldrb	r3, [r7, #27]
 80054ae:	2b08      	cmp	r3, #8
 80054b0:	d827      	bhi.n	8005502 <UART_SetConfig+0x3fe>
 80054b2:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <UART_SetConfig+0x3b4>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	080054dd 	.word	0x080054dd
 80054bc:	080054e5 	.word	0x080054e5
 80054c0:	080054ed 	.word	0x080054ed
 80054c4:	08005503 	.word	0x08005503
 80054c8:	080054f3 	.word	0x080054f3
 80054cc:	08005503 	.word	0x08005503
 80054d0:	08005503 	.word	0x08005503
 80054d4:	08005503 	.word	0x08005503
 80054d8:	080054fb 	.word	0x080054fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054dc:	f7fe fe9e 	bl	800421c <HAL_RCC_GetPCLK1Freq>
 80054e0:	6178      	str	r0, [r7, #20]
        break;
 80054e2:	e013      	b.n	800550c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054e4:	f7fe feb0 	bl	8004248 <HAL_RCC_GetPCLK2Freq>
 80054e8:	6178      	str	r0, [r7, #20]
        break;
 80054ea:	e00f      	b.n	800550c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054ec:	4b49      	ldr	r3, [pc, #292]	; (8005614 <UART_SetConfig+0x510>)
 80054ee:	617b      	str	r3, [r7, #20]
        break;
 80054f0:	e00c      	b.n	800550c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054f2:	f7fe fdfd 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 80054f6:	6178      	str	r0, [r7, #20]
        break;
 80054f8:	e008      	b.n	800550c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054fe:	617b      	str	r3, [r7, #20]
        break;
 8005500:	e004      	b.n	800550c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	76bb      	strb	r3, [r7, #26]
        break;
 800550a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d074      	beq.n	80055fc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	005a      	lsls	r2, r3, #1
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	085b      	lsrs	r3, r3, #1
 800551c:	441a      	add	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	fbb2 f3f3 	udiv	r3, r2, r3
 8005526:	b29b      	uxth	r3, r3
 8005528:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	2b0f      	cmp	r3, #15
 800552e:	d916      	bls.n	800555e <UART_SetConfig+0x45a>
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005536:	d212      	bcs.n	800555e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	b29b      	uxth	r3, r3
 800553c:	f023 030f 	bic.w	r3, r3, #15
 8005540:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	085b      	lsrs	r3, r3, #1
 8005546:	b29b      	uxth	r3, r3
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	b29a      	uxth	r2, r3
 800554e:	89fb      	ldrh	r3, [r7, #14]
 8005550:	4313      	orrs	r3, r2
 8005552:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	89fa      	ldrh	r2, [r7, #14]
 800555a:	60da      	str	r2, [r3, #12]
 800555c:	e04e      	b.n	80055fc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	76bb      	strb	r3, [r7, #26]
 8005562:	e04b      	b.n	80055fc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005564:	7efb      	ldrb	r3, [r7, #27]
 8005566:	2b08      	cmp	r3, #8
 8005568:	d827      	bhi.n	80055ba <UART_SetConfig+0x4b6>
 800556a:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <UART_SetConfig+0x46c>)
 800556c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005570:	08005595 	.word	0x08005595
 8005574:	0800559d 	.word	0x0800559d
 8005578:	080055a5 	.word	0x080055a5
 800557c:	080055bb 	.word	0x080055bb
 8005580:	080055ab 	.word	0x080055ab
 8005584:	080055bb 	.word	0x080055bb
 8005588:	080055bb 	.word	0x080055bb
 800558c:	080055bb 	.word	0x080055bb
 8005590:	080055b3 	.word	0x080055b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005594:	f7fe fe42 	bl	800421c <HAL_RCC_GetPCLK1Freq>
 8005598:	6178      	str	r0, [r7, #20]
        break;
 800559a:	e013      	b.n	80055c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800559c:	f7fe fe54 	bl	8004248 <HAL_RCC_GetPCLK2Freq>
 80055a0:	6178      	str	r0, [r7, #20]
        break;
 80055a2:	e00f      	b.n	80055c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055a4:	4b1b      	ldr	r3, [pc, #108]	; (8005614 <UART_SetConfig+0x510>)
 80055a6:	617b      	str	r3, [r7, #20]
        break;
 80055a8:	e00c      	b.n	80055c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055aa:	f7fe fda1 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 80055ae:	6178      	str	r0, [r7, #20]
        break;
 80055b0:	e008      	b.n	80055c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055b6:	617b      	str	r3, [r7, #20]
        break;
 80055b8:	e004      	b.n	80055c4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	76bb      	strb	r3, [r7, #26]
        break;
 80055c2:	bf00      	nop
    }

    if (pclk != 0U)
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d018      	beq.n	80055fc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	085a      	lsrs	r2, r3, #1
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	441a      	add	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055dc:	b29b      	uxth	r3, r3
 80055de:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	2b0f      	cmp	r3, #15
 80055e4:	d908      	bls.n	80055f8 <UART_SetConfig+0x4f4>
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ec:	d204      	bcs.n	80055f8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	60da      	str	r2, [r3, #12]
 80055f6:	e001      	b.n	80055fc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005608:	7ebb      	ldrb	r3, [r7, #26]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3720      	adds	r7, #32
 800560e:	46bd      	mov	sp, r7
 8005610:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005614:	00f42400 	.word	0x00f42400

08005618 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	f003 0310 	and.w	r3, r3, #16
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d01a      	beq.n	800572e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005716:	d10a      	bne.n	800572e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	605a      	str	r2, [r3, #4]
  }
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af02      	add	r7, sp, #8
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800576a:	f7fc fa8d 	bl	8001c88 <HAL_GetTick>
 800576e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	2b08      	cmp	r3, #8
 800577c:	d10e      	bne.n	800579c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800577e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f82a 	bl	80057e6 <UART_WaitOnFlagUntilTimeout>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e020      	b.n	80057de <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0304 	and.w	r3, r3, #4
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d10e      	bne.n	80057c8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f814 	bl	80057e6 <UART_WaitOnFlagUntilTimeout>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e00a      	b.n	80057de <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2220      	movs	r2, #32
 80057cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2220      	movs	r2, #32
 80057d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b084      	sub	sp, #16
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	60f8      	str	r0, [r7, #12]
 80057ee:	60b9      	str	r1, [r7, #8]
 80057f0:	603b      	str	r3, [r7, #0]
 80057f2:	4613      	mov	r3, r2
 80057f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057f6:	e05d      	b.n	80058b4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fe:	d059      	beq.n	80058b4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005800:	f7fc fa42 	bl	8001c88 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	429a      	cmp	r2, r3
 800580e:	d302      	bcc.n	8005816 <UART_WaitOnFlagUntilTimeout+0x30>
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d11b      	bne.n	800584e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005824:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0201 	bic.w	r2, r2, #1
 8005834:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2220      	movs	r2, #32
 800583a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2220      	movs	r2, #32
 8005840:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e042      	b.n	80058d4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b00      	cmp	r3, #0
 800585a:	d02b      	beq.n	80058b4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800586a:	d123      	bne.n	80058b4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005874:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005884:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0201 	bic.w	r2, r2, #1
 8005894:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2220      	movs	r2, #32
 800589a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2220      	movs	r2, #32
 80058a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2220      	movs	r2, #32
 80058a6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e00f      	b.n	80058d4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	69da      	ldr	r2, [r3, #28]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	4013      	ands	r3, r2
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	bf0c      	ite	eq
 80058c4:	2301      	moveq	r3, #1
 80058c6:	2300      	movne	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	461a      	mov	r2, r3
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d092      	beq.n	80057f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <__libc_init_array>:
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	4e0d      	ldr	r6, [pc, #52]	; (8005914 <__libc_init_array+0x38>)
 80058e0:	4c0d      	ldr	r4, [pc, #52]	; (8005918 <__libc_init_array+0x3c>)
 80058e2:	1ba4      	subs	r4, r4, r6
 80058e4:	10a4      	asrs	r4, r4, #2
 80058e6:	2500      	movs	r5, #0
 80058e8:	42a5      	cmp	r5, r4
 80058ea:	d109      	bne.n	8005900 <__libc_init_array+0x24>
 80058ec:	4e0b      	ldr	r6, [pc, #44]	; (800591c <__libc_init_array+0x40>)
 80058ee:	4c0c      	ldr	r4, [pc, #48]	; (8005920 <__libc_init_array+0x44>)
 80058f0:	f000 f820 	bl	8005934 <_init>
 80058f4:	1ba4      	subs	r4, r4, r6
 80058f6:	10a4      	asrs	r4, r4, #2
 80058f8:	2500      	movs	r5, #0
 80058fa:	42a5      	cmp	r5, r4
 80058fc:	d105      	bne.n	800590a <__libc_init_array+0x2e>
 80058fe:	bd70      	pop	{r4, r5, r6, pc}
 8005900:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005904:	4798      	blx	r3
 8005906:	3501      	adds	r5, #1
 8005908:	e7ee      	b.n	80058e8 <__libc_init_array+0xc>
 800590a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800590e:	4798      	blx	r3
 8005910:	3501      	adds	r5, #1
 8005912:	e7f2      	b.n	80058fa <__libc_init_array+0x1e>
 8005914:	0800599c 	.word	0x0800599c
 8005918:	0800599c 	.word	0x0800599c
 800591c:	0800599c 	.word	0x0800599c
 8005920:	080059a0 	.word	0x080059a0

08005924 <memset>:
 8005924:	4402      	add	r2, r0
 8005926:	4603      	mov	r3, r0
 8005928:	4293      	cmp	r3, r2
 800592a:	d100      	bne.n	800592e <memset+0xa>
 800592c:	4770      	bx	lr
 800592e:	f803 1b01 	strb.w	r1, [r3], #1
 8005932:	e7f9      	b.n	8005928 <memset+0x4>

08005934 <_init>:
 8005934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005936:	bf00      	nop
 8005938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593a:	bc08      	pop	{r3}
 800593c:	469e      	mov	lr, r3
 800593e:	4770      	bx	lr

08005940 <_fini>:
 8005940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005942:	bf00      	nop
 8005944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005946:	bc08      	pop	{r3}
 8005948:	469e      	mov	lr, r3
 800594a:	4770      	bx	lr
